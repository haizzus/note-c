<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="note_8h" kind="file" language="C++">
    <compoundname>note.h</compoundname>
    <includes local="no">float.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="yes">n_edge.h</includes>
    <includes refid="n__cjson_8h" local="yes">n_cjson.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>float.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>n_cjson.h</label>
        <link refid="n__cjson_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>limits.h</label>
      </node>
      <node id="1">
        <label>/home/runner/work/note-c/note-c/note.h</label>
        <link refid="note_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>n_edge.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_note_m_d5_context" prot="public">NoteMD5Context</innerclass>
    <innerclass refid="struct_note_payload_desc" prot="public">NotePayloadDesc</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="note_8h_1ad3ef8b1d9585fb28c46942ab96815b20" prot="public" static="no">
        <name>NOTE_C_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="24" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a15af17c840e4dee0e552124fde744773" prot="public" static="no">
        <name>NOTE_C_VERSION_MINOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="25" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a9a66291724eb8ba8bc651dc90ed441f9" prot="public" static="no">
        <name>NOTE_C_VERSION_PATCH</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="26" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" prot="public" static="no">
        <name>JNUMBER</name>
        <initializer>double</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="49" column="10" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" prot="public" static="no">
        <name>ERRSTR</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="50" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1abfbe0ccd32ceaaa2a1f085293634ddac" prot="public" static="no">
        <name>ERRDBG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="51" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa4e6f9fe285abae5dec0312c1dda3f06" prot="public" static="no">
        <name>NoteNewBody</name>
        <initializer><ref refid="n__cjson_8c_1ae86ee2002e7ae53d7fa6ccfcae55de0e" kindref="member">JCreateObject</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="200" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a09e55e06b045772b4fc105c0329c73a1" prot="public" static="no">
        <name>NoteAddBodyToObject</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer><ref refid="n__cjson_8c_1a3430617fcd905e9d3d997354cb7e23cc" kindref="member">JAddItemToObject</ref>(a, &quot;body&quot;, b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="201" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aada0fea556f714e917ac330c87c7c2c1" prot="public" static="no">
        <name>NoteGetBody</name>
        <param><defname>a</defname></param>
        <initializer><ref refid="note_8h_1a400afcdd67056f7e62cb0f576baa07e8" kindref="member">JGetObject</ref>(a, &quot;body&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="202" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6081d56bf39642758465b3c1d155f853" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_MAJOR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="210" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a17656ac3ed2c4e6a77b115417bf75a7a" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_MINOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="211" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1acdd8348847658b936879035020767bab" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_DETAILED</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="212" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a148902b910ba060dac353c3871183403" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_ALGORITHMIC</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="213" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a11bc43f4578ce909ad4403cc3b15e79f" prot="public" static="no">
        <name>SYNCSTATUS_LEVEL_ALL</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="214" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1acd6f73358d95a8188495babd142c5977" prot="public" static="no">
        <name>NoteResponseError</name>
        <param><defname>rsp</defname></param>
        <initializer>(!<ref refid="note_8h_1af6782558e937adf063fa560bf006df99" kindref="member">JIsNullString</ref>(rsp, &quot;err&quot;))</initializer>
        <briefdescription>
<para>Check if the Notecard response contains an error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>The response to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if there&apos;s an error and <computeroutput>false</computeroutput> if there&apos;s not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="225" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aebc81ad84af23cc172214e6bfae7a00f" prot="public" static="no">
        <name>NoteResponseErrorContains</name>
        <param><defname>rsp</defname></param>
        <param><defname>errstr</defname></param>
        <initializer>(<ref refid="note_8h_1a072439fc8a9e15edc00300eceac8d35e" kindref="member">JContainsString</ref>(rsp, &quot;err&quot;, errstr))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="226" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a5e957ef70b05d1b5173ba34ea7b60588" prot="public" static="no">
        <name>NoteDeleteResponse</name>
        <param><defname>rsp</defname></param>
        <initializer><ref refid="n__cjson_8c_1a68aef53f8739bf4a34f9dd73af9a6a4b" kindref="member">JDelete</ref>(rsp)</initializer>
        <briefdescription>
<para>Free a response from the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rsp</parametername>
</parameternamelist>
<parameterdescription>
<para>The response to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="232" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a3107c5344909029555deedfacb21b43a" prot="public" static="no">
        <name>NOTE_I2C_ADDR_DEFAULT</name>
        <initializer>0x17</initializer>
        <briefdescription>
<para>The default I2C address of the Notecard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="262" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa043f18c8e0b59eef37008116957dbfa" prot="public" static="no">
        <name>NOTE_I2C_HEADER_SIZE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="266" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1adc8fa90e5c138f5c4a0ac9da3be910d4" prot="public" static="no">
        <name>NOTE_I2C_MAX_MAX</name>
        <initializer>(UCHAR_MAX - <ref refid="note_8h_1aa043f18c8e0b59eef37008116957dbfa" kindref="member">NOTE_I2C_HEADER_SIZE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="271" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a029462dd63c2f85402fa69f5466082f2" prot="public" static="no">
        <name>NOTE_I2C_MAX_DEFAULT</name>
        <initializer>30</initializer>
        <briefdescription>
<para>The maximum number of bytes to request from or transmit to the Notecard in a single chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="291" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6c208024da45b2b4150b2f98d951efb4" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_ERROR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="307" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_WARN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="308" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_INFO</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="309" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL_DEBUG</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="310" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" prot="public" static="no">
        <name>_NOTE_C_STRINGIZE</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="315" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa0eaf84658de3c39c7263959f4950e41" prot="public" static="no">
        <name>NOTE_C_STRINGIZE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" kindref="member">_NOTE_C_STRINGIZE</ref>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="316" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" prot="public" static="no">
        <name>NOTE_C_LOG_FILE_AND_LINE</name>
        <param><defname>lvl</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="323" column="10" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a87c75bac44560f4cbb8573dc0048169a" prot="public" static="no">
        <name>NOTE_C_LOG_ERROR</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>); \
  <ref refid="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>, &quot;[ERROR] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" kindref="member">NOTE_C_LOG_LEVEL_ERROR</ref>, msg); \
} while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="326" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7ac988c4204339520399f37a04eb4110" prot="public" static="no">
        <name>NOTE_C_LOG_WARN</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" kindref="member">NOTE_C_LOG_LEVEL_WARN</ref>); \
  <ref refid="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" kindref="member">NOTE_C_LOG_LEVEL_WARN</ref>, &quot;[WARN] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" kindref="member">NOTE_C_LOG_LEVEL_WARN</ref>, msg); \
} while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="332" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a260d740972b2082c72f77b416713f5a0" prot="public" static="no">
        <name>NOTE_C_LOG_INFO</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref>); \
  <ref refid="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref>, &quot;[INFO] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref>, msg); \
} while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="338" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a3123fd4930117eb19b75fef8199d6032" prot="public" static="no">
        <name>NOTE_C_LOG_DEBUG</name>
        <param><defname>msg</defname></param>
        <initializer>  do { \
  <ref refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" kindref="member">NOTE_C_LOG_FILE_AND_LINE</ref>(<ref refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" kindref="member">NOTE_C_LOG_LEVEL_DEBUG</ref>); \
  <ref refid="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(<ref refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" kindref="member">NOTE_C_LOG_LEVEL_DEBUG</ref>, &quot;[DEBUG] &quot;); \
  NoteDebugWithLevelLn(<ref refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" kindref="member">NOTE_C_LOG_LEVEL_DEBUG</ref>, msg); \
} while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="344" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ac7f821af4d5b209d37104e2f8038f69c" prot="public" static="no">
        <name>NOTE_C_LOG_LEVEL</name>
        <initializer><ref refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" kindref="member">NOTE_C_LOG_LEVEL_INFO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="353" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1abb2f3b5f9047911dfa9ae2249ae4ad58" prot="public" static="no">
        <name>JTYPE_NOT_PRESENT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="396" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a1dde42a8f9d06851b91f73dcadb48067" prot="public" static="no">
        <name>JTYPE_BOOL_TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="397" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a33c56f9e059f017b5f73a7207b5f690a" prot="public" static="no">
        <name>JTYPE_BOOL_FALSE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="398" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7fd70bf9265ce886f8370b4fb8eebb92" prot="public" static="no">
        <name>JTYPE_BOOL</name>
        <initializer><ref refid="note_8h_1a1dde42a8f9d06851b91f73dcadb48067" kindref="member">JTYPE_BOOL_TRUE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="399" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ab65facde73aab39c8c078c8f328badb0" prot="public" static="no">
        <name>JTYPE_NULL</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="400" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a34cb28204f46e15dc57b5b82181e2e1d" prot="public" static="no">
        <name>JTYPE_NUMBER_ZERO</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="401" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a73cc27bda4c0d44bffca5dbc353e8d65" prot="public" static="no">
        <name>JTYPE_NUMBER</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="402" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a88bdd6cb77b65bec7d1a12d512a021a7" prot="public" static="no">
        <name>JTYPE_STRING_BLANK</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="403" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a05967fa1a39c824fce62fe31a645ca08" prot="public" static="no">
        <name>JTYPE_STRING_ZERO</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="404" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ab081e08668cdcbaed0bf2506cb666f9b" prot="public" static="no">
        <name>JTYPE_STRING_NUMBER</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="405" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ad5597cf60a093c2986fb5451e69ea43e" prot="public" static="no">
        <name>JTYPE_STRING_BOOL_TRUE</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="406" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a9db7f1f3c20bfd4aa66d563cde2d3bef" prot="public" static="no">
        <name>JTYPE_STRING_BOOL_FALSE</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="407" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aeba8ddb49a982975aff58fbc5a44b37d" prot="public" static="no">
        <name>JTYPE_STRING</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="408" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7f3ba7ec204fbe5e43714b514236a1c7" prot="public" static="no">
        <name>JTYPE_OBJECT</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="409" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a3029c9e9a021cf404acbc2178b94470f" prot="public" static="no">
        <name>JTYPE_ARRAY</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="410" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a5427874049e8ce6e2211214d93f232c7" prot="public" static="no">
        <name>JGetObjectItemName</name>
        <param><defname>j</defname></param>
        <initializer>(j-&gt;string)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="414" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a20c36388ecbae9120b19c30118891097" prot="public" static="no">
        <name>JNTOA_PRECISION</name>
        <initializer>(16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="417" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a2554bdccd902653258af24e049abaccb" prot="public" static="no">
        <name>JNTOA_MAX</name>
        <initializer>(44)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="418" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ada955eca3890263865a0f8b15afc052d" prot="public" static="no">
        <name>NOTE_MD5_HASH_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="434" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a1bb87c25941d1a303245efbe489929e7" prot="public" static="no">
        <name>NOTE_MD5_HASH_STRING_SIZE</name>
        <initializer>(((<ref refid="note_8h_1ada955eca3890263865a0f8b15afc052d" kindref="member">NOTE_MD5_HASH_SIZE</ref>)*2)+1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="435" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a2468ed01b499ba8fc72fefa3500cad90" prot="public" static="no">
        <name>NoteSend</name>
        <initializer><ref refid="note_8h_1a859c73fcda95741f545f2996d0d4d50a" kindref="member">NoteAdd</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="497" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" prot="public" static="no">
        <name>NP_SEGTYPE_LEN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="506" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a21ad183750f7d93528d707af3339b200" prot="public" static="no">
        <name>NP_SEGLEN_LEN</name>
        <initializer>sizeof(uint32_t)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="507" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6bd262ffa71c6e153f70b1fcbfbe9150" prot="public" static="no">
        <name>NP_SEGHDR_LEN</name>
        <initializer>(<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref> + <ref refid="note_8h_1a21ad183750f7d93528d707af3339b200" kindref="member">NP_SEGLEN_LEN</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="508" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a18eddc8e4f0522a438b6475058e5ad32" prot="public" static="no">
        <name>TBOOL</name>
        <initializer>true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="523" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a6186fd56a505b415b2ab2f50233c157f" prot="public" static="no">
        <name>TINT8</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="524" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a91ba007692878e4a02154c04ae390f39" prot="public" static="no">
        <name>TINT16</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="525" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a2011bffb5bae1513306b0615f885ecc3" prot="public" static="no">
        <name>TINT24</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="526" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ab1bbd49f40d8d7722f8ca7347bd83513" prot="public" static="no">
        <name>TINT32</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="527" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a8437f26572687d03e061a0113af0cb0c" prot="public" static="no">
        <name>TINT64</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="528" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ade35b42a310f0bde7e6741c9ee7673b4" prot="public" static="no">
        <name>TUINT8</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="529" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a1d8690165d7e8509f58efd34fd45041e" prot="public" static="no">
        <name>TUINT16</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="530" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a5a5e5e167c6cb206ea61d86cf030adb5" prot="public" static="no">
        <name>TUINT24</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="531" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a7f2af02b4c87ac0d4804ad8b5437d48d" prot="public" static="no">
        <name>TUINT32</name>
        <initializer>24</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="532" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a154fa3416f08de2b073fe6aef8c0104d" prot="public" static="no">
        <name>TFLOAT16</name>
        <initializer>12.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="533" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a340a46ea4717ab906196ee4ada26c0a0" prot="public" static="no">
        <name>TFLOAT32</name>
        <initializer>14.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="534" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a05a270325382e9d22be6317760dc800a" prot="public" static="no">
        <name>TFLOAT64</name>
        <initializer>18.1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="535" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1ad7d1fa7b9a59ec5eba97dd784cbc29e9" prot="public" static="no">
        <name>TSTRING</name>
        <param><defname>N</defname></param>
        <initializer><ref refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" kindref="member">_NOTE_C_STRINGIZE</ref>(N)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="536" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="note_8h_1a465bf5c669736c4f4d64d185d736c5bb" prot="public" static="no">
        <name>TSTRINGV</name>
        <initializer><ref refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" kindref="member">_NOTE_C_STRINGIZE</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="537" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="537" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" prot="public" static="no">
        <type>unsigned long int</type>
        <definition>typedef unsigned long int JTIME</definition>
        <argsstring></argsstring>
        <name>JTIME</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="57" column="27" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1ac9d4324784f851631c22f78099225463" prot="public" static="no">
        <type>void(*</type>
        <definition>mutexFn</definition>
        <argsstring>)(void)</argsstring>
        <name>mutexFn</name>
        <briefdescription>
<para>The type for the various mutex (i.e. lock/unlock) hooks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="77" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1af700faf8575fb2f45c3881786624b4d6" prot="public" static="no">
        <type>void *(*</type>
        <definition>mallocFn</definition>
        <argsstring>)(size_t size)</argsstring>
        <name>mallocFn</name>
        <briefdescription>
<para>The type for the memory allocation hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to allocate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly allocated memory or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="87" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" prot="public" static="no">
        <type>void(*</type>
        <definition>freeFn</definition>
        <argsstring>)(void *mem)</argsstring>
        <name>freeFn</name>
        <briefdescription>
<para>The type for the memory freeing hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="95" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" prot="public" static="no">
        <type>void(*</type>
        <definition>delayMsFn</definition>
        <argsstring>)(uint32_t ms)</argsstring>
        <name>delayMsFn</name>
        <briefdescription>
<para>The type for the millisecond delay hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to delay for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="103" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>getMsFn</definition>
        <argsstring>)(void)</argsstring>
        <name>getMsFn</name>
        <briefdescription>
<para>The type for the millisecond counter hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of the millisecond counter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="111" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a233e9fec868082bb68e23c6e73af67a2" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* debugOutputFn) (const char *text)</definition>
        <argsstring>)(const char *text)</argsstring>
        <name>debugOutputFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="112" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a75873a7790764116d88f80aaaf23263b" prot="public" static="no">
        <type>bool(*</type>
        <definition>serialResetFn</definition>
        <argsstring>)(void)</argsstring>
        <name>serialResetFn</name>
        <briefdescription>
<para>The type for the serial reset hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to reset the serial peripheral used to communicate with the Notecard.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> on success and <computeroutput>false</computeroutput> on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="124" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" prot="public" static="no">
        <type>void(*</type>
        <definition>serialTransmitFn</definition>
        <argsstring>)(uint8_t *txBuf, size_t txBufSize, bool flush)</argsstring>
        <name>serialTransmitFn</name>
        <briefdescription>
<para>The type for the serial transmit hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer of bytes to transmit to the Notecard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of <computeroutput>txBuf</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, flush the serial peripheral&apos;s transmit buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="134" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a58f8d48fe891877b7702a013e63e6991" prot="public" static="no">
        <type>bool(*</type>
        <definition>serialAvailableFn</definition>
        <argsstring>)(void)</argsstring>
        <name>serialAvailableFn</name>
        <briefdescription>
<para>The type for the serial available hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if there&apos;s data to read and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="142" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" prot="public" static="no">
        <type>char(*</type>
        <definition>serialReceiveFn</definition>
        <argsstring>)(void)</argsstring>
        <name>serialReceiveFn</name>
        <briefdescription>
<para>The type for the serial receive hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The received byte. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="151" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1ab18cc9957da000e5a05db53d4543d26b" prot="public" static="no">
        <type>bool(*</type>
        <definition>i2cResetFn</definition>
        <argsstring>)(uint16_t address)</argsstring>
        <name>i2cResetFn</name>
        <briefdescription>
<para>The type for the I2C reset hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to reset the I2C peripheral used to communicate with the Notecard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="162" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a841b338ac017194680b08ec57c179efc" prot="public" static="no">
        <type>const char *(*</type>
        <definition>i2cTransmitFn</definition>
        <argsstring>)(uint16_t address, uint8_t *txBuf, uint16_t txBufSize)</argsstring>
        <name>i2cTransmitFn</name>
        <briefdescription>
<para>The type for the I2C transmit hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to send a buffer of bytes to the Notecard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard to transmit the data to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer of bytes to transmit to the Notecard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>txBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of <computeroutput>txBuf</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success and an error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="176" column="15" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" prot="public" static="no">
        <type>const char *(*</type>
        <definition>i2cReceiveFn</definition>
        <argsstring>)(uint16_t address, uint8_t *rxBuf, uint16_t rxBufSize, uint32_t *available)</argsstring>
        <name>i2cReceiveFn</name>
        <briefdescription>
<para>The type for the I2C receive hook. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook is used to receive a buffer of bytes from the Notecard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard sending the data to receive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rxBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to hold the data received from the Notecard. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rxBufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of rxBuf. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes remaining to be received, if any.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL on success and an error string on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="192" column="15" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a294656e8c061b533f96003de5e4687fb" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* txnStartFn) (uint32_t timeoutMs)</definition>
        <argsstring>)(uint32_t timeoutMs)</argsstring>
        <name>txnStartFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="194" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* txnStopFn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>txnStopFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="195" column="9" bodyfile="/home/runner/work/note-c/note-c/note.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="note_8h_1a6358096b5a9e5c69a4f56b12e80092fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteReset</definition>
        <argsstring>(void)</argsstring>
        <name>NoteReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize or re-initialize the module. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the reset was successful and false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="198" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="672" bodyend="678" declfile="/home/runner/work/note-c/note-c/note.h" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6c62afa66443f9dbb0a36bf9f76e9896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteResetRequired</definition>
        <argsstring>(void)</argsstring>
        <name>NoteResetRequired</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Mark that a reset will be required before doing further I/O on a given port. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="199" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="662" bodyend="665" declfile="/home/runner/work/note-c/note-c/note.h" declline="199" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2f5fce48cfd817f1bf940ab145f7cc59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* NoteNewRequest</definition>
        <argsstring>(const char *request)</argsstring>
        <name>NoteNewRequest</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Create a new JSON request. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a dynamically allocated <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with one field <computeroutput>&quot;req&quot;</computeroutput> whose value is the passed in request string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the request, for example <computeroutput>hub.set</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the &quot;req&quot; field populated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="203" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="96" bodyend="103" declfile="/home/runner/work/note-c/note-c/note.h" declline="203" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a48877576f8d94864dedbe663ba68c3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* NoteNewCommand</definition>
        <argsstring>(const char *request)</argsstring>
        <name>NoteNewCommand</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Create a new JSON command. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a dynamically allocated <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with one field <computeroutput>&quot;cmd&quot;</computeroutput> whose value is the passed in request string. The difference between a command and a request is that the Notecard does not send a response to commands, only to requests.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the command (e.g. <computeroutput>card.attn</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the &quot;cmd&quot; field populated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="204" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="117" bodyend="124" declfile="/home/runner/work/note-c/note-c/note.h" declline="204" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab163a75667bef7e74294125d40e15c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* NoteRequestResponse</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteRequestResponse</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref></computeroutput> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="205" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="203" bodyend="219" declfile="/home/runner/work/note-c/note-c/note.h" declline="205" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5d43b857b1bf72f312a2e7ba1825445b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* NoteRequestResponseWithRetry</definition>
        <argsstring>(J *req, uint32_t timeoutSeconds)</argsstring>
        <name>NoteRequestResponseWithRetry</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutSeconds</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard, retrying it until it succeeds or it times out, and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time limit for retires, in seconds, if there is no response, or if the response contains an I/O error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref></computeroutput> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="206" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="237" bodyend="284" declfile="/home/runner/work/note-c/note-c/note.h" declline="206" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a24fcc50f78212b5f7e08ed05b58c0ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* NoteRequestResponseJSON</definition>
        <argsstring>(const char *reqJSON)</argsstring>
        <name>NoteRequestResponseJSON</name>
        <param>
          <type>const char *</type>
          <declname>reqJSON</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <computeroutput>NoteRequestResponse</computeroutput>, this function expects the request to be a valid JSON C-string, rather than a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object. This string MUST be newline-terminated. The response is returned as a dynamically allocated JSON C-string. The response string is verbatim what was sent by the Notecard, which IS newline-terminated. The caller is responsible for freeing the response string. If the request was a command (i.e. it uses &quot;cmd&quot; instead of &quot;req&quot;), this function returns NULL, because the Notecard does not send a response to commands.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reqJSON</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid newline-terminated JSON C-string containing the request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newline-terminated JSON C-string with the response, or NULL if there was no response or if there was an error.</para>
</simplesect>
<simplesect kind="note"><para>When a &quot;cmd&quot; is sent, it is not possible to determine if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="207" column="7" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="304" bodyend="359" declfile="/home/runner/work/note-c/note-c/note.h" declline="207" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab0427f0cd3e286d8020309ea88687d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSuspendTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>NoteSuspendTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Suppress showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="208" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="73" bodyend="76" declfile="/home/runner/work/note-c/note-c/note.h" declline="208" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a27085ec262c1b7e69d4f8998e2a5219c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteResumeTransactionDebug</definition>
        <argsstring>(void)</argsstring>
        <name>NoteResumeTransactionDebug</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Resume showing transaction details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="209" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="81" bodyend="84" declfile="/home/runner/work/note-c/note-c/note.h" declline="209" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1adde35249318a7b5cc3f1c2393685b75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteDebugSyncStatus</definition>
        <argsstring>(int pollFrequencyMs, int maxLevel)</argsstring>
        <name>NoteDebugSyncStatus</name>
        <param>
          <type>int</type>
          <declname>pollFrequencyMs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxLevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="215" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="215" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab1227db7501f0b979ed894fb764790e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRequest</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteRequest</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not. The response from the Notecard, if any, is freed and not returned to the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if successful and <computeroutput>false</computeroutput> if an error occurs (e.g. out of memory or the response from the Notecard has an &quot;err&quot; field). If req is a command rather than a request, a <computeroutput>true</computeroutput> return value indicates that the command was sent without error. However, since the Notecard sends no response to commands, it does not guarantee that the command was received and processed by the Notecard.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="n__request_8c_1ab163a75667bef7e74294125d40e15c12" kindref="member">NoteRequestResponse</ref></computeroutput> if you need to work with the response. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="216" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="144" bodyend="156" declfile="/home/runner/work/note-c/note-c/note.h" declline="216" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7eef6ff395f1e94934d3f9eb99bbcb9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRequestWithRetry</definition>
        <argsstring>(J *req, uint32_t timeoutSeconds)</argsstring>
        <name>NoteRequestWithRetry</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeoutSeconds</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard, retrying it until it succeeds or it times out. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed in request object is always freed, regardless of if the request was successful or not. The response from the Notecard, if any, is freed and not returned to the caller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time limit for retires, in seconds, if there is no response, or if the response contains an I/O error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if successful and <computeroutput>false</computeroutput> if an error occurs (e.g. out of memory or the response from the Notecard has an &quot;err&quot; field).</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="n__request_8c_1a5d43b857b1bf72f312a2e7ba1825445b" kindref="member">NoteRequestResponseWithRetry</ref></computeroutput> if you need to work with the response. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="217" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="175" bodyend="188" declfile="/home/runner/work/note-c/note-c/note.h" declline="217" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a8b5e380054a80026a80c531a734f025c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* NoteTransaction</definition>
        <argsstring>(J *req)</argsstring>
        <name>NoteTransaction</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Send a request to the Notecard and return the response. </para>
        </briefdescription>
        <detaileddescription>
<para>This function doesn&apos;t free the passed in request object. The caller is responsible for freeing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> request object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="struct_j" kindref="compound">J</ref></computeroutput> object with the response or NULL if there was an error sending the request.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="note_8h_1acd6f73358d95a8188495babd142c5977" kindref="member">NoteResponseError</ref></computeroutput> to check the response for errors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="233" column="3" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="374" bodyend="377" declfile="/home/runner/work/note-c/note-c/note.h" declline="233" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a1385294098059d94d366e2fd843358e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteErrorContains</definition>
        <argsstring>(const char *errstr, const char *errtype)</argsstring>
        <name>NoteErrorContains</name>
        <param>
          <type>const char *</type>
          <declname>errstr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>errtype</declname>
        </param>
        <briefdescription>
<para>Check to see if a Notecard error is present in a JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para>Only Notecard errors enclosed in <computeroutput>{}</computeroutput> (e.g. <computeroutput>{io}</computeroutput> for an I/O error) are guaranteed by the API.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errstr</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to check for errors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The error substring to search for in errstr.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if errstr contains errtype and <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="234" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="691" bodyend="694" declfile="/home/runner/work/note-c/note-c/note.h" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3b8d73d3dc3b3315b1be8260e83f10ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteErrorClean</definition>
        <argsstring>(char *errbuf)</argsstring>
        <name>NoteErrorClean</name>
        <param>
          <type>char *</type>
          <declname>errbuf</declname>
          <defname>begin</defname>
        </param>
        <briefdescription>
<para>Clean error strings out of the specified buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Notecard errors are enclosed in {} (e.g. {io} for an I/O error). This function takes the input string and removes all errors from it, meaning it removes any substrings matching the pattern {some error string}, including the braces.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>A C-string to to clean of errors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="235" column="6" bodyfile="/home/runner/work/note-c/note-c/n_request.c" bodystart="706" bodyend="724" declfile="/home/runner/work/note-c/note-c/note.h" declline="235" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6844f5cd4d6e38d65c090dba954321b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDebugOutput</definition>
        <argsstring>(debugOutputFn fn)</argsstring>
        <name>NoteSetFnDebugOutput</name>
        <param>
          <type><ref refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" kindref="member">debugOutputFn</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific debug output function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to call for debug output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="236" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="234" bodyend="237" declfile="/home/runner/work/note-c/note-c/note.h" declline="236" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a946facc30c7f3b5f1820db01fde9fa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnTransaction</definition>
        <argsstring>(txnStartFn startFn, txnStopFn stopFn)</argsstring>
        <name>NoteSetFnTransaction</name>
        <param>
          <type><ref refid="note_8h_1a294656e8c061b533f96003de5e4687fb" kindref="member">txnStartFn</ref></type>
          <declname>startFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" kindref="member">txnStopFn</ref></type>
          <declname>stopFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific transaction initiation/completion fn&apos;s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific transaction initiation function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stopFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific transaction completion function to use. to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="237" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="259" bodyend="263" declfile="/home/runner/work/note-c/note-c/note.h" declline="237" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a81210c0d43535f1945083f7b3fcad67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn, mutexFn lockNotefn, mutexFn unlockNotefn)</argsstring>
        <name>NoteSetFnMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockNotefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockNotefn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific mutex functions for I2C and the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C lock function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C unlock function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard lock function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard unlock function to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="238" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="276" bodyend="282" declfile="/home/runner/work/note-c/note-c/note.h" declline="238" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6879f42e34e075aec82b499fd5ddd12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2CMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn)</argsstring>
        <name>NoteSetFnI2CMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific mutex functions for I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C unlock function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="240" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="290" bodyend="294" declfile="/home/runner/work/note-c/note-c/note.h" declline="240" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a534aa37f7e753dd06a847f429f8e743f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnNoteMutex</definition>
        <argsstring>(mutexFn lockFn, mutexFn unlockFn)</argsstring>
        <name>NoteSetFnNoteMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific mutex functions for the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard unlock function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="241" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="302" bodyend="306" declfile="/home/runner/work/note-c/note-c/note.h" declline="241" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a57a711029fed4148da73679ff2c8a154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDefault</definition>
        <argsstring>(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn)</argsstring>
        <name>NoteSetFnDefault</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>millisfn</declname>
        </param>
        <briefdescription>
<para>Set the default memory and timing hooks if they aren&apos;t already set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default memory allocation <computeroutput>malloc</computeroutput> function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default memory free function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default delay function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default &apos;millis&apos; function to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="242" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="194" bodyend="208" declfile="/home/runner/work/note-c/note-c/note.h" declline="242" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad334248744d5387da78ca09c3498f397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFn</definition>
        <argsstring>(mallocFn mallocHook, freeFn freeHook, delayMsFn delayMsHook, getMsFn getMsHook)</argsstring>
        <name>NoteSetFn</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freeHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayMsHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>getMsHook</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific memory and timing hooks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific memory allocation function (i.e. <computeroutput>malloc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freeHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific memory free function (i.e. <computeroutput>free</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific millisecond delay function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific millisecond counter function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="244" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="219" bodyend="226" declfile="/home/runner/work/note-c/note-c/note.h" declline="244" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a85c66fdcef6d9ea044a9adc37af5afa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnSerial</definition>
        <argsstring>(serialResetFn resetFn, serialTransmitFn transmitFn, serialAvailableFn availFn, serialReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnSerial</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific hooks for communicating with the Notecard over serial. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial available function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial receive function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="246" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="317" bodyend="331" declfile="/home/runner/work/note-c/note-c/note.h" declline="246" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abeb555883ff039880048164763c3b9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2C</definition>
        <argsstring>(uint32_t notecardAddr, uint32_t maxTransmitSize, i2cResetFn resetFn, i2cTransmitFn transmitFn, i2cReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnI2C</name>
        <param>
          <type>uint32_t</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific hooks for communicating with the Notecard over I2C, as well as the I2C address of the Notecard and maximum transmission size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard. Pass 0 to use the default address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The max number of bytes to send to the Notecard in a single I2C segment. Pass 0 to use the default maximum transmission size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C receive function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="248" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="347" bodyend="364" declfile="/home/runner/work/note-c/note-c/note.h" declline="248" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a8648db242df0d5ac68334ab93ee5fa0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDisabled</definition>
        <argsstring>(void)</argsstring>
        <name>NoteSetFnDisabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set the platform-specific communications method to be disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="251" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="371" bodyend="381" declfile="/home/runner/work/note-c/note-c/note.h" declline="251" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a58d7607711312253b402749133e2933a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetI2CAddress</definition>
        <argsstring>(uint32_t i2caddress)</argsstring>
        <name>NoteSetI2CAddress</name>
        <param>
          <type>uint32_t</type>
          <declname>i2caddress</declname>
        </param>
        <briefdescription>
<para>Set the I2C address for communication with the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2caddress</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C address to use for the Notecard. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="252" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="799" bodyend="802" declfile="/home/runner/work/note-c/note-c/note.h" declline="252" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7df3b564875a8975cf524851a4f83ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* NoteUserAgent</definition>
        <argsstring>(void)</argsstring>
        <name>NoteUserAgent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="295" column="3" declfile="/home/runner/work/note-c/note-c/note.h" declline="295" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad09beb502758c3c20ea01d0b5940a751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteUserAgentUpdate</definition>
        <argsstring>(J *ua)</argsstring>
        <name>NoteUserAgentUpdate</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>ua</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="296" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="296" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a35ebbb9e71fc6822ec7848df598b1b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetUserAgent</definition>
        <argsstring>(char *agent)</argsstring>
        <name>NoteSetUserAgent</name>
        <param>
          <type>char *</type>
          <declname>agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="297" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="297" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a6586f487873db10a6cca9f4f2812f2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetUserAgentOS</definition>
        <argsstring>(char *os_name, char *os_platform, char *os_family, char *os_version)</argsstring>
        <name>NoteSetUserAgentOS</name>
        <param>
          <type>char *</type>
          <declname>os_name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>os_platform</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>os_family</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>os_version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="298" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="298" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a06db056eec95b5d3bce80a00d87720d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetUserAgentCPU</definition>
        <argsstring>(int cpu_mem, int cpu_mhz, int cpu_cores, char *cpu_vendor, char *cpu_name)</argsstring>
        <name>NoteSetUserAgentCPU</name>
        <param>
          <type>int</type>
          <declname>cpu_mem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu_mhz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu_cores</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>cpu_vendor</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>cpu_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="299" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab3a18d61ebc4df43fad6b0eb8ff327fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebug</definition>
        <argsstring>(const char *message)</argsstring>
        <name>NoteDebug</name>
        <param>
          <type>const char *</type>
          <declname>message</declname>
          <defname>line</defname>
        </param>
        <briefdescription>
<para>Write to the debug stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A debug string for output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="302" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="421" bodyend="428" declfile="/home/runner/work/note-c/note-c/note.h" declline="302" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a080a80ba2040187f419af4cafe0042e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugln</definition>
        <argsstring>(const char *message)</argsstring>
        <name>NoteDebugln</name>
        <param>
          <type>const char *</type>
          <declname>message</declname>
          <defname>line</defname>
        </param>
        <briefdescription>
<para>Write text to the debug stream and output a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A debug string for output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="303" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="409" bodyend="413" declfile="/home/runner/work/note-c/note-c/note.h" declline="303" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab81480d77900e81e466d9010ed57a347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugIntln</definition>
        <argsstring>(const char *message, int n)</argsstring>
        <name>NoteDebugIntln</name>
        <param>
          <type>const char *</type>
          <declname>message</declname>
          <defname>line</defname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Write a number to the debug stream and output a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A debug string for output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="304" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="392" bodyend="401" declfile="/home/runner/work/note-c/note-c/note.h" declline="304" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab239dae9dfc343d2569fe87041ae7d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>NoteDebugf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="305" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="305" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevel</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevel</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Write the message to the debug stream, if the level is less than or equal to NOTE_C_LOG_LEVEL. Otherwise, the message is dropped. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level of the message. See the NOTE_C_LOG_LEVEL_* macros in <ref refid="note_8h" kindref="compound">note.h</ref> for possible values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="312" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="439" bodyend="450" declfile="/home/runner/work/note-c/note-c/note.h" declline="312" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aea4a872558f91cfdba679dea15e39b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevelLn</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevelLn</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Same as NoteDebugWithLevel, but add a newline at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level of the message. See the NOTE_C_LOG_LEVEL_* macros in <ref refid="note_8h" kindref="compound">note.h</ref> for possible values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="313" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="460" bodyend="464" declfile="/home/runner/work/note-c/note-c/note.h" declline="313" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a97d5a9da7d7d35519c54e90c8bcd9b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* NoteMalloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>NoteMalloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a memory chunk using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to allocate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="356" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="548" bodyend="558" declfile="/home/runner/work/note-c/note-c/note.h" declline="356" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a34280452b55a2013552227bd6e811fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteFree</definition>
        <argsstring>(void *)</argsstring>
        <name>NoteFree</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Free memory using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the memory address to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="357" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="566" bodyend="577" declfile="/home/runner/work/note-c/note-c/note.h" declline="357" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a598d2b8e9559691bc17c0a578fd9b71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long unsigned int</type>
        <definition>long unsigned int NoteGetMs</definition>
        <argsstring>(void)</argsstring>
        <name>NoteGetMs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current milliseconds value from the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current milliseconds value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="358" column="19" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="473" bodyend="479" declfile="/home/runner/work/note-c/note-c/note.h" declline="358" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a30ebf8f80fc647865819c842adc53816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDelayMs</definition>
        <argsstring>(uint32_t ms)</argsstring>
        <name>NoteDelayMs</name>
        <param>
          <type>uint32_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Delay milliseconds using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>the milliseconds delay value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="359" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="487" bodyend="492" declfile="/home/runner/work/note-c/note-c/note.h" declline="359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a195386217d2b20709846d45780af2013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteLockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteLockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="360" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="584" bodyend="589" declfile="/home/runner/work/note-c/note-c/note.h" declline="360" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2a4589fef84a01f2a1bee1c5a7053fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteUnlockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteUnlockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlock the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="361" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="596" bodyend="601" declfile="/home/runner/work/note-c/note-c/note.h" declline="361" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a57dcffb142faaef2714839d27afe5be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CAddress</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CAddress</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the I2C address of the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current I2C address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="362" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="785" bodyend="791" declfile="/home/runner/work/note-c/note-c/note.h" declline="362" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a35bbb8179be3a72ab7ec302dcbfad9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CMax</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CMax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine the maximum number of bytes for each segment of data sent to the Notecard over I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A 32-bit integer of the maximum number of bytes per I2C segment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="363" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="811" bodyend="823" declfile="/home/runner/work/note-c/note-c/note.h" declline="363" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae7537bf172173234ecb77a6e0af513f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteMemAvailable</definition>
        <argsstring>(void)</argsstring>
        <name>NoteMemAvailable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="364" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="364" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a36d63199ff85bd480eafc6b547e7f9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePrint</definition>
        <argsstring>(const char *text)</argsstring>
        <name>NotePrint</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="365" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="365" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a17c3fa0521904ce276913ce0bd666fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NotePrintln</definition>
        <argsstring>(const char *line)</argsstring>
        <name>NotePrintln</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="366" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="366" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aca48731908e450c955c6dc1f6b3381a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePrintf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>NotePrintf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="367" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="367" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aeb79f86261de904967d433c1b5e9a1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t strlcpy</definition>
        <argsstring>(char *dst, const char *src, size_t siz)</argsstring>
        <name>strlcpy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>siz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="370" column="8" declfile="/home/runner/work/note-c/note-c/note.h" declline="370" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae85b825a7f3d4dcf136b85949b646a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t strlcat</definition>
        <argsstring>(char *dst, const char *src, size_t siz)</argsstring>
        <name>strlcat</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>siz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="371" column="8" declfile="/home/runner/work/note-c/note-c/note.h" declline="371" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab4005e4eb92f95e4430147551c093a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JInit</definition>
        <argsstring>(void)</argsstring>
        <name>JInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="374" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="374" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa2c94029f47ff6dab5fe3087d8efef4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JCheck</definition>
        <argsstring>(void)</argsstring>
        <name>JCheck</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="375" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="375" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a4ee86c1ee5f2774561bc1cb98ab6c864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JIsPresent</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JIsPresent</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="376" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="376" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa2037e372291b35bb6ecc03cb667f824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* JGetString</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JGetString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="377" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="377" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abf00912f72a812914e07d448ffcd2448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER JGetNumber</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JGetNumber</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="378" column="9" declfile="/home/runner/work/note-c/note-c/note.h" declline="378" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a08e5226b44098cbefb63b1b692196e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* JGetArray</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JGetArray</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="379" column="3" declfile="/home/runner/work/note-c/note-c/note.h" declline="379" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a400afcdd67056f7e62cb0f576baa07e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
        <definition>J* JGetObject</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JGetObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="380" column="3" declfile="/home/runner/work/note-c/note-c/note.h" declline="380" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a94c534da4da8f0aa53cc615fbb29709a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int JGetInt</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JGetInt</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="381" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="381" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a555acb4c8a9b55e2664fa5e97e8b2ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JGetBool</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JGetBool</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="382" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="382" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2b2a9c92f2833d424d1a7ab66b3533a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER JNumberValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JNumberValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="383" column="9" declfile="/home/runner/work/note-c/note-c/note.h" declline="383" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2499d761e554a80868701a50c2a05f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* JStringValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JStringValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="384" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="384" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3e836494d9b3a6fc4e4b02dc2767df83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JBoolValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JBoolValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="385" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="385" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad364de55d4b0e97d6d64e90d8a0eb2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int JIntValue</definition>
        <argsstring>(J *item)</argsstring>
        <name>JIntValue</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="386" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="386" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af6782558e937adf063fa560bf006df99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JIsNullString</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JIsNullString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="387" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="387" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad16b761dc3cc6c03ca8314e444d01b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JIsExactString</definition>
        <argsstring>(J *rsp, const char *field, const char *teststr)</argsstring>
        <name>JIsExactString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>teststr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="388" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="388" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a072439fc8a9e15edc00300eceac8d35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JContainsString</definition>
        <argsstring>(J *rsp, const char *field, const char *substr)</argsstring>
        <name>JContainsString</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="389" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="389" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ac2169d697c34df1b9456f490eb787c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JAddBinaryToObject</definition>
        <argsstring>(J *req, const char *fieldName, const void *binaryData, uint32_t binaryDataLen)</argsstring>
        <name>JAddBinaryToObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>binaryData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>binaryDataLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="390" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="390" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a77a1c869172c5dd8b93f8e1f54dd78b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JGetBinaryFromObject</definition>
        <argsstring>(J *rsp, const char *fieldName, uint8_t **retBinaryData, uint32_t *retBinaryDataLen)</argsstring>
        <name>JGetBinaryFromObject</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>retBinaryData</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>retBinaryDataLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="391" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="391" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1acf30975898c4673472f59eb97d913712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* JGetItemName</definition>
        <argsstring>(const J *item)</argsstring>
        <name>JGetItemName</name>
        <param>
          <type>const <ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="392" column="12" declfile="/home/runner/work/note-c/note-c/note.h" declline="392" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aacfb17275b3a24dc751834205db62e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* JAllocString</definition>
        <argsstring>(uint8_t *buffer, uint32_t len)</argsstring>
        <name>JAllocString</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="393" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="393" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ade41b3ffbdfc99fa8a87ae63cfebb2fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* JType</definition>
        <argsstring>(J *item)</argsstring>
        <name>JType</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="394" column="12" declfile="/home/runner/work/note-c/note-c/note.h" declline="394" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aaee018574a0e0ddb8292aa4702d9fdf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JGetType</definition>
        <argsstring>(J *rsp, const char *field)</argsstring>
        <name>JGetType</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>rsp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="411" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="411" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a39d4dc978cbd0c5d10d287b4ac57b8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JGetItemType</definition>
        <argsstring>(J *item)</argsstring>
        <name>JGetItemType</name>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="412" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="412" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a791851ed95cd350c24f33af25e7f0af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JBaseItemType</definition>
        <argsstring>(int type)</argsstring>
        <name>JBaseItemType</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="413" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="413" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae6dda9b360c01c2e654c62a320db56ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* JNtoA</definition>
        <argsstring>(JNUMBER f, char *buf, int precision)</argsstring>
        <name>JNtoA</name>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="419" column="7" declfile="/home/runner/work/note-c/note-c/note.h" declline="419" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2cc99bbc9c2ede0b85f310a775960f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER JAtoN</definition>
        <argsstring>(const char *string, char **endPtr)</argsstring>
        <name>JAtoN</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="420" column="9" declfile="/home/runner/work/note-c/note-c/note.h" declline="420" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad252a60646d12a82000f0bba37067982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JItoA</definition>
        <argsstring>(long int n, char *s)</argsstring>
        <name>JItoA</name>
        <param>
          <type>long int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="421" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="421" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad3ef746249e53f9af8ebaf3ead338b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int JAtoI</definition>
        <argsstring>(const char *s)</argsstring>
        <name>JAtoI</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="422" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="422" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a9c5d969e2bfd9cbda902e6388285e624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64EncodeLen</definition>
        <argsstring>(int len)</argsstring>
        <name>JB64EncodeLen</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="423" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="423" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abd22cd7117763400021d6653a33f0d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64Encode</definition>
        <argsstring>(char *coded_dst, const char *plain_src, int len_plain_src)</argsstring>
        <name>JB64Encode</name>
        <param>
          <type>char *</type>
          <declname>coded_dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>plain_src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len_plain_src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="424" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="424" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a53559c7bc512587f6776794a78fc424f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64DecodeLen</definition>
        <argsstring>(const char *coded_src)</argsstring>
        <name>JB64DecodeLen</name>
        <param>
          <type>const char *</type>
          <declname>coded_src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="425" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="425" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a48c6cad9358d4154567949c192445a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int JB64Decode</definition>
        <argsstring>(char *plain_dst, const char *coded_src)</argsstring>
        <name>JB64Decode</name>
        <param>
          <type>char *</type>
          <declname>plain_dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>coded_src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="426" column="5" declfile="/home/runner/work/note-c/note-c/note.h" declline="426" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af22f3a3c0071c07b3765df7907301c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Init</definition>
        <argsstring>(NoteMD5Context *ctx)</argsstring>
        <name>NoteMD5Init</name>
        <param>
          <type><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="436" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="436" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae70580a3b6b7d93590e84a46b4035fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Update</definition>
        <argsstring>(NoteMD5Context *ctx, unsigned char const *buf, unsigned long len)</argsstring>
        <name>NoteMD5Update</name>
        <param>
          <type><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char const *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="437" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="437" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad1aef239c14e207376fff97a9269b569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Final</definition>
        <argsstring>(unsigned char *digest, NoteMD5Context *ctx)</argsstring>
        <name>NoteMD5Final</name>
        <param>
          <type>unsigned char *</type>
          <declname>digest</declname>
        </param>
        <param>
          <type><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="438" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="438" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7a52d858400f4634e7be440a5753967e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Transform</definition>
        <argsstring>(unsigned long buf[4], const unsigned char inraw[64])</argsstring>
        <name>NoteMD5Transform</name>
        <param>
          <type>unsigned long</type>
          <declname>buf</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>inraw</declname>
          <array>[64]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="439" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="439" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a789bebabb0a08fe02ccea85aa917488d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5Hash</definition>
        <argsstring>(unsigned char *data, unsigned long len, unsigned char *retHash)</argsstring>
        <name>NoteMD5Hash</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>retHash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="440" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="440" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a54de4da750412f3f2192e1ff453810ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5HashString</definition>
        <argsstring>(unsigned char *data, unsigned long len, char *strbuf, unsigned long buflen)</argsstring>
        <name>NoteMD5HashString</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strbuf</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="441" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="441" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a095d52cf0bc437922a8104cb97445d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteMD5HashToString</definition>
        <argsstring>(unsigned char *hash, char *strbuf, unsigned long buflen)</argsstring>
        <name>NoteMD5HashToString</name>
        <param>
          <type>unsigned char *</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>strbuf</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="442" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="442" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a10c81f1c0470f4b3cd1c877183163815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecDecode</definition>
        <argsstring>(const uint8_t *encData, uint32_t encDataLen, uint8_t *decBuf, uint32_t decBufSize)</argsstring>
        <name>NoteBinaryCodecDecode</name>
        <param>
          <type>const uint8_t *</type>
          <declname>encData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>encDataLen</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>decBuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decBufSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="446" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="446" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a91a381b28624b7d7a5b7c59cea31e40f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecEncode</definition>
        <argsstring>(const uint8_t *decData, uint32_t decDataLen, uint8_t *encBuf, uint32_t encBufSize)</argsstring>
        <name>NoteBinaryCodecEncode</name>
        <param>
          <type>const uint8_t *</type>
          <declname>decData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decDataLen</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>encBuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>encBufSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="448" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="448" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5db0bc71463c613425debfb34fa38794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecMaxDecodedLength</definition>
        <argsstring>(uint32_t bufferSize)</argsstring>
        <name>NoteBinaryCodecMaxDecodedLength</name>
        <param>
          <type>uint32_t</type>
          <declname>bufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="450" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="450" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a126a4cb7f30d49518bd2552902099634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteBinaryCodecMaxEncodedLength</definition>
        <argsstring>(uint32_t unencodedLength)</argsstring>
        <name>NoteBinaryCodecMaxEncodedLength</name>
        <param>
          <type>uint32_t</type>
          <declname>unencodedLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="451" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="451" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1afe6fc60626aff39d8daa732d5cd98acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* NoteBinaryStoreDecodedLength</definition>
        <argsstring>(uint32_t *len)</argsstring>
        <name>NoteBinaryStoreDecodedLength</name>
        <param>
          <type>uint32_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="452" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="452" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a7f645124333a941eccdba3fbc70381f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* NoteBinaryStoreEncodedLength</definition>
        <argsstring>(uint32_t *len)</argsstring>
        <name>NoteBinaryStoreEncodedLength</name>
        <param>
          <type>uint32_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="453" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="453" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0a6303c68a7d3fec63ed94e540c349b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* NoteBinaryStoreReceive</definition>
        <argsstring>(uint8_t *buffer, uint32_t bufLen, uint32_t decodedOffset, uint32_t decodedLen)</argsstring>
        <name>NoteBinaryStoreReceive</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decodedOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>decodedLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="454" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="454" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a4b0744fcac784957345f532646a81c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* NoteBinaryStoreReset</definition>
        <argsstring>(void)</argsstring>
        <name>NoteBinaryStoreReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="456" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="456" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1afdad71c4316f98ed2502d632846edf76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* NoteBinaryStoreTransmit</definition>
        <argsstring>(uint8_t *unencodedData, uint32_t unencodedLen, uint32_t bufLen, uint32_t notecardOffset)</argsstring>
        <name>NoteBinaryStoreTransmit</name>
        <param>
          <type>uint8_t *</type>
          <declname>unencodedData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>unencodedLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bufLen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>notecardOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="457" column="13" declfile="/home/runner/work/note-c/note-c/note.h" declline="457" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a2e8d519c15479dfaf09566ed97ec3711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteSetSTSecs</definition>
        <argsstring>(uint32_t secs)</argsstring>
        <name>NoteSetSTSecs</name>
        <param>
          <type>uint32_t</type>
          <declname>secs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="459" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="459" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1afc76a1b0c6b4dfa1ab2e7c3d6286583e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteTimeValid</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTimeValid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="460" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="460" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1abf11915def4e2d9b1e54cb63d13e95e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteTimeValidST</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTimeValidST</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="461" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="461" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0d930f1361f45030bc3638197b329bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref></type>
        <definition>JTIME NoteTime</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="462" column="7" declfile="/home/runner/work/note-c/note-c/note.h" declline="462" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a1f834110044f5d4586ad98bde88084d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref></type>
        <definition>JTIME NoteTimeST</definition>
        <argsstring>(void)</argsstring>
        <name>NoteTimeST</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="463" column="7" declfile="/home/runner/work/note-c/note-c/note.h" declline="463" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af5568df79a7d26a8807b54853a56b921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteTimeRefreshMins</definition>
        <argsstring>(uint32_t mins)</argsstring>
        <name>NoteTimeRefreshMins</name>
        <param>
          <type>uint32_t</type>
          <declname>mins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="464" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="464" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a09596cfe3e377e92f4ebf6700e3ac990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteTimeSet</definition>
        <argsstring>(JTIME secondsUTC, int offset, char *zone, char *country, char *area)</argsstring>
        <name>NoteTimeSet</name>
        <param>
          <type><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref></type>
          <declname>secondsUTC</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>zone</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>country</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>area</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="465" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="465" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a57534ae715e262dd91a55bd71de37631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteLocalTimeST</definition>
        <argsstring>(uint16_t *retYear, uint8_t *retMonth, uint8_t *retDay, uint8_t *retHour, uint8_t *retMinute, uint8_t *retSecond, char **retWeekday, char **retZone)</argsstring>
        <name>NoteLocalTimeST</name>
        <param>
          <type>uint16_t *</type>
          <declname>retYear</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retMonth</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retDay</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retHour</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retMinute</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>retSecond</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retWeekday</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retZone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="466" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="466" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ade2325739300181a0fad13e83f377ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteRegion</definition>
        <argsstring>(char **retCountry, char **retArea, char **retZone, int *retZoneOffset)</argsstring>
        <name>NoteRegion</name>
        <param>
          <type>char **</type>
          <declname>retCountry</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retArea</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>retZone</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>retZoneOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="467" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="467" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a544f2aeaa9bbd229ab173f8e9ba42dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteLocationValid</definition>
        <argsstring>(char *errbuf, uint32_t errbuflen)</argsstring>
        <name>NoteLocationValid</name>
        <param>
          <type>char *</type>
          <declname>errbuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>errbuflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="468" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="468" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa1fd37b1100f616b178fc6c0bcd18292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteLocationValidST</definition>
        <argsstring>(char *errbuf, uint32_t errbuflen)</argsstring>
        <name>NoteLocationValidST</name>
        <param>
          <type>char *</type>
          <declname>errbuf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>errbuflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="469" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="469" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3188b2609ac87faadfb0ec5cb9b158bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteTurboIO</definition>
        <argsstring>(bool enable)</argsstring>
        <name>NoteTurboIO</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="470" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="470" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a3c4baf03d1d9c122772a767e5929c0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int NoteGetEnvInt</definition>
        <argsstring>(const char *variable, long int defaultVal)</argsstring>
        <name>NoteGetEnvInt</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="471" column="10" declfile="/home/runner/work/note-c/note-c/note.h" declline="471" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af6f3d1929a16c26050550f01d69de9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
        <definition>JNUMBER NoteGetEnvNumber</definition>
        <argsstring>(const char *variable, JNUMBER defaultVal)</argsstring>
        <name>NoteGetEnvNumber</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="472" column="9" declfile="/home/runner/work/note-c/note-c/note.h" declline="472" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a84b63daf99110b90e0e9cad94df694ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetEnv</definition>
        <argsstring>(const char *variable, const char *defaultVal, char *buf, uint32_t buflen)</argsstring>
        <name>NoteGetEnv</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>defaultVal</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="473" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="473" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1af7edd00b0a1764be80585ca6b99e8045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetEnvDefault</definition>
        <argsstring>(const char *variable, char *buf)</argsstring>
        <name>NoteSetEnvDefault</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="474" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="474" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a43932b5cf2ba57357efd5de109c288d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetEnvDefaultNumber</definition>
        <argsstring>(const char *variable, JNUMBER defaultVal)</argsstring>
        <name>NoteSetEnvDefaultNumber</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="475" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="475" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae4d28e0bc6231f500f7cd03101eb94ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetEnvDefaultInt</definition>
        <argsstring>(const char *variable, long int defaultVal)</argsstring>
        <name>NoteSetEnvDefaultInt</name>
        <param>
          <type>const char *</type>
          <declname>variable</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>defaultVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="476" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="476" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad479c8e6d2c17ed58f96b9aa234ad81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteIsConnected</definition>
        <argsstring>(void)</argsstring>
        <name>NoteIsConnected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="477" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="477" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aa1cce9855703b1b8a5cc856a84378c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteIsConnectedST</definition>
        <argsstring>(void)</argsstring>
        <name>NoteIsConnectedST</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="478" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="478" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a387befb0abe72b215645a6650ea7e72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetNetStatus</definition>
        <argsstring>(char *statusBuf, int statusBufLen)</argsstring>
        <name>NoteGetNetStatus</name>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="479" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="479" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab9c78d2fef7a116ccc22ced6a9304fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetVersion</definition>
        <argsstring>(char *versionBuf, int versionBufLen)</argsstring>
        <name>NoteGetVersion</name>
        <param>
          <type>char *</type>
          <declname>versionBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>versionBufLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="480" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="480" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a711d1c4cb256e29e34853959d4f032cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetLocation</definition>
        <argsstring>(JNUMBER *retLat, JNUMBER *retLon, JTIME *time, char *statusBuf, int statusBufLen)</argsstring>
        <name>NoteGetLocation</name>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref> *</type>
          <declname>retLat</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref> *</type>
          <declname>retLon</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref> *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="481" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="481" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a54f0c0ac25d91cdff09d4c374f4b9393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetLocation</definition>
        <argsstring>(JNUMBER lat, JNUMBER lon)</argsstring>
        <name>NoteSetLocation</name>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
          <declname>lat</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref></type>
          <declname>lon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="482" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="482" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aafa429043e07e78852045017c75392ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteClearLocation</definition>
        <argsstring>(void)</argsstring>
        <name>NoteClearLocation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="483" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="483" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a1f5e4d1d5d4c91ee2409686e59e28e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetLocationMode</definition>
        <argsstring>(char *modeBuf, int modeBufLen)</argsstring>
        <name>NoteGetLocationMode</name>
        <param>
          <type>char *</type>
          <declname>modeBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modeBufLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="484" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="484" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a38ab54badbef76dd436d557889eaaf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetLocationMode</definition>
        <argsstring>(const char *mode, uint32_t seconds)</argsstring>
        <name>NoteSetLocationMode</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="485" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="485" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1acf36d7c23420551e51597554a69f97c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetServiceConfig</definition>
        <argsstring>(char *productBuf, int productBufLen, char *serviceBuf, int serviceBufLen, char *deviceBuf, int deviceBufLen, char *snBuf, int snBufLen)</argsstring>
        <name>NoteGetServiceConfig</name>
        <param>
          <type>char *</type>
          <declname>productBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>productBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>serviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>serviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>deviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>snBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>snBufLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="486" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="486" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ac5989f17e99b8f154fe4318bb7bcf73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetServiceConfigST</definition>
        <argsstring>(char *productBuf, int productBufLen, char *serviceBuf, int serviceBufLen, char *deviceBuf, int deviceBufLen, char *snBuf, int snBufLen)</argsstring>
        <name>NoteGetServiceConfigST</name>
        <param>
          <type>char *</type>
          <declname>productBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>productBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>serviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>serviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>deviceBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>snBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>snBufLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="487" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="487" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1adfe58a53ab4a4de6f6b00092494330ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetStatus</definition>
        <argsstring>(char *statusBuf, int statusBufLen, JTIME *bootTime, bool *retUSB, bool *retSignals)</argsstring>
        <name>NoteGetStatus</name>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref> *</type>
          <declname>bootTime</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retUSB</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retSignals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="488" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="488" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad873ec5c640174f673ceabad89b8f030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetStatusST</definition>
        <argsstring>(char *statusBuf, int statusBufLen, JTIME *bootTime, bool *retUSB, bool *retSignals)</argsstring>
        <name>NoteGetStatusST</name>
        <param>
          <type>char *</type>
          <declname>statusBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>statusBufLen</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref> *</type>
          <declname>bootTime</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retUSB</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>retSignals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="489" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="489" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5495b9b5807536807987af253ee2b918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSleep</definition>
        <argsstring>(char *stateb64, uint32_t seconds, const char *modes)</argsstring>
        <name>NoteSleep</name>
        <param>
          <type>char *</type>
          <declname>stateb64</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>modes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="490" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="490" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ab6689989662882c9140822e67d0ae84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteWake</definition>
        <argsstring>(int stateLen, void *state)</argsstring>
        <name>NoteWake</name>
        <param>
          <type>int</type>
          <declname>stateLen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="491" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="491" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a0a6818960d5dc59c9dc15ec12c8eca67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteFactoryReset</definition>
        <argsstring>(bool deleteConfigSettings)</argsstring>
        <name>NoteFactoryReset</name>
        <param>
          <type>bool</type>
          <declname>deleteConfigSettings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="492" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="492" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ac4e9ce3c9b56c05603c3a87377abfdda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetSerialNumber</definition>
        <argsstring>(const char *sn)</argsstring>
        <name>NoteSetSerialNumber</name>
        <param>
          <type>const char *</type>
          <declname>sn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="493" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="493" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a68e1b388237b6d156f07299c8fdea24b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetProductID</definition>
        <argsstring>(const char *productID)</argsstring>
        <name>NoteSetProductID</name>
        <param>
          <type>const char *</type>
          <declname>productID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="494" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="494" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aedfe8eec797fa14b80c9a836a3267a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetUploadMode</definition>
        <argsstring>(const char *uploadMode, int uploadMinutes, bool align)</argsstring>
        <name>NoteSetUploadMode</name>
        <param>
          <type>const char *</type>
          <declname>uploadMode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uploadMinutes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>align</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="495" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="495" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a65b9120ff5b755405d76a3ba992197ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetSyncMode</definition>
        <argsstring>(const char *uploadMode, int uploadMinutes, int downloadMinutes, bool align, bool sync)</argsstring>
        <name>NoteSetSyncMode</name>
        <param>
          <type>const char *</type>
          <declname>uploadMode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uploadMinutes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>downloadMinutes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>align</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="496" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="496" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a859c73fcda95741f545f2996d0d4d50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteAdd</definition>
        <argsstring>(const char *target, J *body, bool urgent)</argsstring>
        <name>NoteAdd</name>
        <param>
          <type>const char *</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>body</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>urgent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="498" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="498" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a740e04f22326f5f421bf3c86d5fd1ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSendToRoute</definition>
        <argsstring>(const char *method, const char *routeAlias, char *notefile, J *body)</argsstring>
        <name>NoteSendToRoute</name>
        <param>
          <type>const char *</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>routeAlias</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>notefile</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="499" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="499" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad29039cfe90306e391d8a85a0df1d69f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetVoltage</definition>
        <argsstring>(JNUMBER *voltage)</argsstring>
        <name>NoteGetVoltage</name>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref> *</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="500" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="500" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a33a8a42563cc3dc4d3bda44144d73784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetTemperature</definition>
        <argsstring>(JNUMBER *temp)</argsstring>
        <name>NoteGetTemperature</name>
        <param>
          <type><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref> *</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="501" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="501" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a289e6d70e17615cf927a9094080139f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteGetContact</definition>
        <argsstring>(char *nameBuf, int nameBufLen, char *orgBuf, int orgBufLen, char *roleBuf, int roleBufLen, char *emailBuf, int emailBufLen)</argsstring>
        <name>NoteGetContact</name>
        <param>
          <type>char *</type>
          <declname>nameBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nameBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>orgBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>orgBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>roleBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>roleBufLen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>emailBuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>emailBufLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="502" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="502" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1aad1a6d6d04a1cac3339022d1068df201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteSetContact</definition>
        <argsstring>(char *nameBuf, char *orgBuf, char *roleBuf, char *emailBuf)</argsstring>
        <name>NoteSetContact</name>
        <param>
          <type>char *</type>
          <declname>nameBuf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>orgBuf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>roleBuf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>emailBuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="503" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="503" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a42f5f4c8090a088fbc0d6b68646e9c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadSaveAndSleep</definition>
        <argsstring>(NotePayloadDesc *desc, uint32_t seconds, const char *modes)</argsstring>
        <name>NotePayloadSaveAndSleep</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seconds</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>modes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="514" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="514" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a62202e752d3e6b75d0beebbc0ebd29e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadRetrieveAfterSleep</definition>
        <argsstring>(NotePayloadDesc *desc)</argsstring>
        <name>NotePayloadRetrieveAfterSleep</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="515" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="515" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ae8b19866d8b472354b80679fcd03d3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NotePayloadSet</definition>
        <argsstring>(NotePayloadDesc *desc, uint8_t *buf, uint32_t buflen)</argsstring>
        <name>NotePayloadSet</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="516" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="516" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a516e80912a7b5874770888765db7347e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NotePayloadFree</definition>
        <argsstring>(NotePayloadDesc *desc)</argsstring>
        <name>NotePayloadFree</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="517" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="517" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1ad7c0fdd390eaf4338117bba38a92cdce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadAddSegment</definition>
        <argsstring>(NotePayloadDesc *desc, const char segtype[NP_SEGTYPE_LEN], void *pdata, uint32_t plen)</argsstring>
        <name>NotePayloadAddSegment</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>segtype</declname>
          <array>[NP_SEGTYPE_LEN]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>plen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="518" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="518" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a10bb7e445f9515a2289e9ed2dd4485d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadFindSegment</definition>
        <argsstring>(NotePayloadDesc *desc, const char segtype[NP_SEGTYPE_LEN], void *pdata, uint32_t *plen)</argsstring>
        <name>NotePayloadFindSegment</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>segtype</declname>
          <array>[NP_SEGTYPE_LEN]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>plen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="519" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="519" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a573bc94dabf3f27220685a8c4d7adce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NotePayloadGetSegment</definition>
        <argsstring>(NotePayloadDesc *desc, const char segtype[NP_SEGTYPE_LEN], void *pdata, uint32_t len)</argsstring>
        <name>NotePayloadGetSegment</name>
        <param>
          <type><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>segtype</declname>
          <array>[NP_SEGTYPE_LEN]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="520" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="520" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="note_8h_1a5de0a3a1b648b9d5c2d0a7c608264f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool NoteTemplate</definition>
        <argsstring>(const char *notefileID, J *templateBody)</argsstring>
        <name>NoteTemplate</name>
        <param>
          <type>const char *</type>
          <declname>notefileID</declname>
        </param>
        <param>
          <type><ref refid="struct_j" kindref="compound">J</ref> *</type>
          <declname>templateBody</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/note.h" line="538" column="6" declfile="/home/runner/work/note-c/note-c/note.h" declline="538" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Written by Ray Ozzie and Blues Inc. team.</para>
<para>Copyright (c) 2019 Blues Inc. MIT License. Use of this source code is governed by licenses granted by the copyright holder including that found in the <ulink url="https://github.com/blues/note-c/blob/master/LICENSE">LICENSE</ulink> file.</para>
<para>This library bundles the <ulink url="https://github.com/DaveGamble/cJSON">cJSON JSON parser library</ulink>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>they&apos;re<sp/>not<sp/>yet<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="note_8h_1ad3ef8b1d9585fb28c46942ab96815b20" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_VERSION_MAJOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="note_8h_1a15af17c840e4dee0e552124fde744773" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_VERSION_MINOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="note_8h_1a9a66291724eb8ba8bc651dc90ed441f9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_VERSION_PATCH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determine<sp/>our<sp/>basic<sp/>floating<sp/>data<sp/>type.<sp/><sp/>In<sp/>most<sp/>cases<sp/>&quot;double&quot;<sp/>is<sp/>the<sp/>right<sp/>answer,<sp/>however<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>very<sp/>small<sp/>microcontrollers<sp/>we<sp/>must<sp/>use<sp/>single-precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FLT_MAX_EXP)<sp/>&amp;&amp;<sp/>defined(DBL_MAX_EXP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(FLT_MAX_EXP<sp/>==<sp/>DBL_MAX_EXP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__FLT_MAX_EXP__)<sp/>&amp;&amp;<sp/>defined(__DBL_MAX_EXP__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FLT_MAX_EXP__<sp/>==<sp/>__DBL_MAX_EXP__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>What<sp/>are<sp/>floating<sp/>point<sp/>exponent<sp/>length<sp/>symbols<sp/>for<sp/>this<sp/>compiler?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>using<sp/>a<sp/>short<sp/>float,<sp/>we<sp/>must<sp/>be<sp/>on<sp/>a<sp/>VERY<sp/>small<sp/>MCU.<sp/><sp/>In<sp/>this<sp/>case,<sp/>define<sp/>additional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>symbols<sp/>that<sp/>will<sp/>save<sp/>quite<sp/>a<sp/>bit<sp/>of<sp/>memory<sp/>in<sp/>the<sp/>runtime<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JNUMBER<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERRSTR(x,y)<sp/>(y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_LOWMEM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JNUMBER<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="note_8h_1a842e0f5c7170ddfde0164bad199d6fdc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERRSTR(x,y)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="note_8h_1abfbe0ccd32ceaaa2a1f085293634ddac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERRDBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNIX<sp/>Epoch<sp/>time<sp/>(also<sp/>known<sp/>as<sp/>POSIX<sp/>time)<sp/>is<sp/>the<sp/><sp/>number<sp/>of<sp/>seconds<sp/>that<sp/>have<sp/>elapsed<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>00:00:00<sp/>Thursday,<sp/>1<sp/>January<sp/>1970,<sp/>Coordinated<sp/>Universal<sp/>Time<sp/>(UTC).<sp/><sp/>In<sp/>this<sp/>project,<sp/>it<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>originates<sp/>from<sp/>the<sp/>Notecard,<sp/>which<sp/>synchronizes<sp/>the<sp/>time<sp/>from<sp/>both<sp/>the<sp/>cell<sp/>network<sp/>and<sp/>GPS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C-callable<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edge<sp/>defs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;n_edge.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cJSON<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="n__cjson_8h" kindref="compound">n_cjson.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notecard<sp/>hook<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="note_8h_1ac9d4324784f851631c22f78099225463" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="87" refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>(*mallocFn)<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="95" refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>mem);</highlight></codeline>
<codeline lineno="103" refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref>)<sp/>(uint32_t<sp/>ms);</highlight></codeline>
<codeline lineno="111" refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="112" refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" kindref="member">debugOutputFn</ref>)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="note_8h_1a75873a7790764116d88f80aaaf23263b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="134" refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref>)<sp/>(uint8_t<sp/>*txBuf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>txBufSize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flush);</highlight></codeline>
<codeline lineno="142" refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>char<sp/>(*<ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="162" refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref>)<sp/>(uint16_t<sp/>address);</highlight></codeline>
<codeline lineno="176" refid="note_8h_1a841b338ac017194680b08ec57c179efc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*i2cTransmitFn)<sp/>(uint16_t<sp/>address,<sp/>uint8_t*<sp/>txBuf,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>txBufSize);</highlight></codeline>
<codeline lineno="192" refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*i2cReceiveFn)<sp/>(uint16_t<sp/>address,<sp/>uint8_t*<sp/>rxBuf,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>rxBufSize,<sp/>uint32_t<sp/>*available);</highlight></codeline>
<codeline lineno="194" refid="note_8h_1a294656e8c061b533f96003de5e4687fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="note_8h_1a294656e8c061b533f96003de5e4687fb" kindref="member">txnStartFn</ref>)<sp/>(uint32_t<sp/>timeoutMs);</highlight></codeline>
<codeline lineno="195" refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" kindref="member">txnStopFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>External<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6358096b5a9e5c69a4f56b12e80092fa" kindref="member">NoteReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6c62afa66443f9dbb0a36bf9f76e9896" kindref="member">NoteResetRequired</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200" refid="note_8h_1aa4e6f9fe285abae5dec0312c1dda3f06" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteNewBody<sp/>JCreateObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="note_8h_1a09e55e06b045772b4fc105c0329c73a1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteAddBodyToObject(a,<sp/>b)<sp/>JAddItemToObject(a,<sp/>&quot;body&quot;</highlight><highlight class="normal">,<sp/>b)</highlight></codeline>
<codeline lineno="202" refid="note_8h_1aada0fea556f714e917ac330c87c7c2c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteGetBody(a)<sp/>JGetObject(a,<sp/>&quot;body&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a2f5fce48cfd817f1bf940ab145f7cc59" kindref="member">NoteNewRequest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a48877576f8d94864dedbe663ba68c3f0" kindref="member">NoteNewCommand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1ab163a75667bef7e74294125d40e15c12" kindref="member">NoteRequestResponse</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a5d43b857b1bf72f312a2e7ba1825445b" kindref="member">NoteRequestResponseWithRetry</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/>uint32_t<sp/>timeoutSeconds);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1a24fcc50f78212b5f7e08ed05b58c0ad1" kindref="member">NoteRequestResponseJSON</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reqJSON);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab0427f0cd3e286d8020309ea88687d09" kindref="member">NoteSuspendTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a27085ec262c1b7e69d4f8998e2a5219c" kindref="member">NoteResumeTransactionDebug</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210" refid="note_8h_1a6081d56bf39642758465b3c1d155f853" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_MAJOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="note_8h_1a17656ac3ed2c4e6a77b115417bf75a7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_MINOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="note_8h_1acdd8348847658b936879035020767bab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_DETAILED<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="note_8h_1a148902b910ba060dac353c3871183403" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_ALGORITHMIC<sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="note_8h_1a11bc43f4578ce909ad4403cc3b15e79f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYNCSTATUS_LEVEL_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="note_8h_1adde35249318a7b5cc3f1c2393685b75b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1adde35249318a7b5cc3f1c2393685b75b" kindref="member">NoteDebugSyncStatus</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pollFrequencyMs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxLevel);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab1227db7501f0b979ed894fb764790e3" kindref="member">NoteRequest</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a7eef6ff395f1e94934d3f9eb99bbcb9a" kindref="member">NoteRequestWithRetry</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/>uint32_t<sp/>timeoutSeconds);</highlight></codeline>
<codeline lineno="225" refid="note_8h_1acd6f73358d95a8188495babd142c5977" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteResponseError(rsp)<sp/>(!JIsNullString(rsp,<sp/>&quot;err&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="226" refid="note_8h_1aebc81ad84af23cc172214e6bfae7a00f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteResponseErrorContains(rsp,<sp/>errstr)<sp/>(JContainsString(rsp,<sp/>&quot;err&quot;</highlight><highlight class="normal">,<sp/>errstr))</highlight></codeline>
<codeline lineno="232" refid="note_8h_1a5e957ef70b05d1b5173ba34ea7b60588" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteDeleteResponse(rsp)<sp/>JDelete(rsp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a8b5e380054a80026a80c531a734f025c" kindref="member">NoteTransaction</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a1385294098059d94d366e2fd843358e5" kindref="member">NoteErrorContains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errstr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errtype);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3b8d73d3dc3b3315b1be8260e83f10ab" kindref="member">NoteErrorClean</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errbuf);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6844f5cd4d6e38d65c090dba954321b4" kindref="member">NoteSetFnDebugOutput</ref>(<ref refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" kindref="member">debugOutputFn</ref><sp/>fn);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a946facc30c7f3b5f1820db01fde9fa4d" kindref="member">NoteSetFnTransaction</ref>(<ref refid="note_8h_1a294656e8c061b533f96003de5e4687fb" kindref="member">txnStartFn</ref><sp/>startFn,<sp/><ref refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" kindref="member">txnStopFn</ref><sp/>stopFn);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a81210c0d43535f1945083f7b3fcad67a" kindref="member">NoteSetFnMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockNotefn,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockNotefn);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6879f42e34e075aec82b499fd5ddd12a" kindref="member">NoteSetFnI2CMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a534aa37f7e753dd06a847f429f8e743f" kindref="member">NoteSetFnNoteMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockFn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockFn);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a57a711029fed4148da73679ff2c8a154" kindref="member">NoteSetFnDefault</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocfn,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freefn,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayfn,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>millisfn);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad334248744d5387da78ca09c3498f397" kindref="member">NoteSetFn</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocHook,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freeHook,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayMsHook,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>getMsHook);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a85c66fdcef6d9ea044a9adc37af5afa7" kindref="member">NoteSetFnSerial</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>receiveFn);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1abeb555883ff039880048164763c3b9f0" kindref="member">NoteSetFnI2C</ref>(uint32_t<sp/>notecardAddr,<sp/>uint32_t<sp/>maxTransmitSize,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>receiveFn);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a8648db242df0d5ac68334ab93ee5fa0e" kindref="member">NoteSetFnDisabled</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a58d7607711312253b402749133e2933a" kindref="member">NoteSetI2CAddress</ref>(uint32_t<sp/>i2caddress);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Notecard,<sp/>whose<sp/>default<sp/>I2C<sp/>address<sp/>is<sp/>below,<sp/>uses<sp/>a<sp/>serial-to-i2c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>protocol<sp/>whose<sp/>&quot;byte<sp/>count&quot;<sp/>must<sp/>fit<sp/>into<sp/>a<sp/>single<sp/>byte<sp/>and<sp/>which<sp/>must<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>a<sp/>2-byte<sp/>header<sp/>field.<sp/><sp/>This<sp/>is<sp/>why<sp/>the<sp/>maximum<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transmitted<sp/>by<sp/>note-c<sp/>in<sp/>a<sp/>single<sp/>I2C<sp/>I/O<sp/>is<sp/>255<sp/>-<sp/>2<sp/>=<sp/>253<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="note_8h_1a3107c5344909029555deedfacb21b43a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_I2C_ADDR_DEFAULT<sp/><sp/><sp/>0x17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Serial-to-i2c<sp/>protocol<sp/>header<sp/>size<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_I2C_HEADER_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="note_8h_1aa043f18c8e0b59eef37008116957dbfa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_I2C_HEADER_SIZE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>bytes<sp/>capable<sp/>of<sp/>being<sp/>transmitted<sp/>in<sp/>a<sp/>single<sp/>read/write<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_I2C_MAX_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="note_8h_1adc8fa90e5c138f5c4a0ac9da3be910d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_I2C_MAX_MAX<sp/>(UCHAR_MAX<sp/>-<sp/>NOTE_I2C_HEADER_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>ARDUINO<sp/>implementations,<sp/>which<sp/>to<sp/>date<sp/>is<sp/>the<sp/>largest<sp/>use<sp/>of<sp/>this<sp/>library,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Wire<sp/>package<sp/>is<sp/>implemented<sp/>in<sp/>a<sp/>broad<sp/>variety<sp/>of<sp/>ways<sp/>by<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vendors.<sp/><sp/>The<sp/>default<sp/>implementation<sp/>has<sp/>a<sp/>mere<sp/>32-byte<sp/>static<sp/>I2C<sp/>buffer,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>that<sp/>the<sp/>maximum<sp/>to<sp/>be<sp/>transmitted<sp/>in<sp/>a<sp/>single<sp/>I/O<sp/>(given<sp/>our</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2-byte<sp/>serial-to-i2c<sp/>protocol<sp/>header)<sp/>is<sp/>30<sp/>bytes.<sp/><sp/>However,<sp/>if<sp/>we<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>specific<sp/>platform<sp/>(such<sp/>as<sp/>STM32DUINO)<sp/>we<sp/>can<sp/>relax<sp/>this<sp/>restriction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NOTE_I2C_MAX_DEFAULT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user<sp/>is<sp/>overriding<sp/>it<sp/>at<sp/>compile<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(ARDUINO_ARCH_STM32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>know<sp/>that<sp/>stm32duino<sp/>dynamically<sp/>allocates<sp/>I/O<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_I2C_MAX_DEFAULT<sp/>NOTE_I2C_MAX_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default<sp/>to<sp/>what&apos;s<sp/>known<sp/>to<sp/>be<sp/>safe<sp/>for<sp/>all<sp/>Arduino<sp/>implementations</highlight></codeline>
<codeline lineno="291" refid="note_8h_1a029462dd63c2f85402fa69f5466082f2" refkind="member"><highlight class="comment"></highlight><highlight class="preprocessor">#define<sp/>NOTE_I2C_MAX_DEFAULT<sp/><sp/><sp/><sp/>30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>User<sp/>agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="note_8h_1a7df3b564875a8975cf524851a4f83ff9" refkind="member"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a7df3b564875a8975cf524851a4f83ff9" kindref="member">NoteUserAgent</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296" refid="note_8h_1ad09beb502758c3c20ea01d0b5940a751" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad09beb502758c3c20ea01d0b5940a751" kindref="member">NoteUserAgentUpdate</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*ua);</highlight></codeline>
<codeline lineno="297" refid="note_8h_1a35ebbb9e71fc6822ec7848df598b1b6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a35ebbb9e71fc6822ec7848df598b1b6f" kindref="member">NoteSetUserAgent</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*agent);</highlight></codeline>
<codeline lineno="298" refid="note_8h_1a6586f487873db10a6cca9f4f2812f2e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a6586f487873db10a6cca9f4f2812f2e1" kindref="member">NoteSetUserAgentOS</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_platform,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_family,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*os_version);</highlight></codeline>
<codeline lineno="299" refid="note_8h_1a06db056eec95b5d3bce80a00d87720d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a06db056eec95b5d3bce80a00d87720d1" kindref="member">NoteSetUserAgentCPU</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_mem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_mhz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu_cores,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cpu_vendor,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cpu_name);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>to<sp/>the<sp/>functions<sp/>set<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab3a18d61ebc4df43fad6b0eb8ff327fa" kindref="member">NoteDebug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a080a80ba2040187f419af4cafe0042e6" kindref="member">NoteDebugln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab81480d77900e81e466d9010ed57a347" kindref="member">NoteDebugIntln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="305" refid="note_8h_1ab239dae9dfc343d2569fe87041ae7d49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab239dae9dfc343d2569fe87041ae7d49" kindref="member">NoteDebugf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="note_8h_1a6c208024da45b2b4150b2f98d951efb4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_ERROR<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="note_8h_1afefa6c4eba9dce431adbf9e5183e04e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_WARN<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="note_8h_1a4b3a37c8c77a3523c47e1efd31e7edc4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_INFO<sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="note_8h_1ae09134b1efa9ccbc91fc1c1b6af5f4b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL_DEBUG<sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aea4a872558f91cfdba679dea15e39b9c" kindref="member">NoteDebugWithLevelLn</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="note_8h_1a9d60cc6621d82d040e56afb6f1607d69" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_NOTE_C_STRINGIZE(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="note_8h_1aa0eaf84658de3c39c7263959f4950e41" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_STRINGIZE(x)<sp/>_NOTE_C_STRINGIZE(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NOTE_C_LOG_SHOW_FILE_AND_LINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_FILE_AND_LINE(lvl)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(lvl,<sp/>__FILE__<sp/>&quot;:&quot;</highlight><highlight class="normal"><sp/>NOTE_C_STRINGIZE(__LINE__)<sp/>&quot;<sp/>&quot;);<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="note_8h_1a073d21669b13a5eff2361fc07c8bbf92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_FILE_AND_LINE(lvl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="note_8h_1a87c75bac44560f4cbb8573dc0048169a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_ERROR(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_ERROR);<sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_ERROR,<sp/>&quot;[ERROR]<sp/>&quot;</highlight><highlight class="normal">);<sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_ERROR,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="note_8h_1a7ac988c4204339520399f37a04eb4110" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_WARN(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_WARN);<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_WARN,<sp/>&quot;[WARN]<sp/>&quot;</highlight><highlight class="normal">);<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_WARN,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="note_8h_1a260d740972b2082c72f77b416713f5a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_INFO(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_INFO);<sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_INFO,<sp/>&quot;[INFO]<sp/>&quot;</highlight><highlight class="normal">);<sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_INFO,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="note_8h_1a3123fd4930117eb19b75fef8199d6032" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_DEBUG(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/>NOTE_C_LOG_FILE_AND_LINE(NOTE_C_LOG_LEVEL_DEBUG);<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/>NoteDebugWithLevel(NOTE_C_LOG_LEVEL_DEBUG,<sp/>&quot;[DEBUG]<sp/>&quot;</highlight><highlight class="normal">);<sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>NoteDebugWithLevelLn(NOTE_C_LOG_LEVEL_DEBUG,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>max<sp/>log<sp/>level<sp/>for<sp/>NoteDebugWithLevel<sp/>is<sp/>only<sp/>configurable<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile-time,<sp/>via<sp/>NOTE_C_LOG_LEVEL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_C_LOG_LEVEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="note_8h_1ac7f821af4d5b209d37104e2f8038f69c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_C_LOG_LEVEL<sp/>NOTE_C_LOG_LEVEL_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1a97d5a9da7d7d35519c54e90c8bcd9b20" kindref="member">NoteMalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a34280452b55a2013552227bd6e811fdd" kindref="member">NoteFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a598d2b8e9559691bc17c0a578fd9b71d" kindref="member">NoteGetMs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a30ebf8f80fc647865819c842adc53816" kindref="member">NoteDelayMs</ref>(uint32_t<sp/>ms);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a195386217d2b20709846d45780af2013" kindref="member">NoteLockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a2a4589fef84a01f2a1bee1c5a7053fc6" kindref="member">NoteUnlockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a57dcffb142faaef2714839d27afe5be0" kindref="member">NoteI2CAddress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a35bbb8179be3a72ab7ec302dcbfad9e7" kindref="member">NoteI2CMax</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364" refid="note_8h_1ae7537bf172173234ecb77a6e0af513f8" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1ae7537bf172173234ecb77a6e0af513f8" kindref="member">NoteMemAvailable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365" refid="note_8h_1a36d63199ff85bd480eafc6b547e7f9a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a36d63199ff85bd480eafc6b547e7f9a0" kindref="member">NotePrint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text);</highlight></codeline>
<codeline lineno="366" refid="note_8h_1a17c3fa0521904ce276913ce0bd666fd1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a17c3fa0521904ce276913ce0bd666fd1" kindref="member">NotePrintln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line);</highlight></codeline>
<codeline lineno="367" refid="note_8h_1aca48731908e450c955c6dc1f6b3381a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aca48731908e450c955c6dc1f6b3381a4" kindref="member">NotePrintf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>helpers<sp/>to<sp/>help<sp/>encourage<sp/>the<sp/>world<sp/>to<sp/>abandon<sp/>the<sp/>horribly-error-prone<sp/>strn*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aeb79f86261de904967d433c1b5e9a1de" kindref="member">strlcpy</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siz);</highlight></codeline>
<codeline lineno="371" refid="note_8h_1ae85b825a7f3d4dcf136b85949b646a46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ae85b825a7f3d4dcf136b85949b646a46" kindref="member">strlcat</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siz);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>JSON<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="note_8h_1ab4005e4eb92f95e4430147551c093a82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab4005e4eb92f95e4430147551c093a82" kindref="member">JInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375" refid="note_8h_1aa2c94029f47ff6dab5fe3087d8efef4f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa2c94029f47ff6dab5fe3087d8efef4f" kindref="member">JCheck</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376" refid="note_8h_1a4ee86c1ee5f2774561bc1cb98ab6c864" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a4ee86c1ee5f2774561bc1cb98ab6c864" kindref="member">JIsPresent</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="377" refid="note_8h_1aa2037e372291b35bb6ecc03cb667f824" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1aa2037e372291b35bb6ecc03cb667f824" kindref="member">JGetString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="378" refid="note_8h_1abf00912f72a812914e07d448ffcd2448" refkind="member"><highlight class="normal"><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1abf00912f72a812914e07d448ffcd2448" kindref="member">JGetNumber</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="379" refid="note_8h_1a08e5226b44098cbefb63b1b692196e1e" refkind="member"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a08e5226b44098cbefb63b1b692196e1e" kindref="member">JGetArray</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="380" refid="note_8h_1a400afcdd67056f7e62cb0f576baa07e8" refkind="member"><highlight class="normal"><ref refid="struct_j" kindref="compound">J</ref><sp/>*<ref refid="note_8h_1a400afcdd67056f7e62cb0f576baa07e8" kindref="member">JGetObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="381" refid="note_8h_1a94c534da4da8f0aa53cc615fbb29709a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a94c534da4da8f0aa53cc615fbb29709a" kindref="member">JGetInt</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="382" refid="note_8h_1a555acb4c8a9b55e2664fa5e97e8b2ffc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a555acb4c8a9b55e2664fa5e97e8b2ffc" kindref="member">JGetBool</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="383" refid="note_8h_1a2b2a9c92f2833d424d1a7ab66b3533a8" refkind="member"><highlight class="normal"><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1a2b2a9c92f2833d424d1a7ab66b3533a8" kindref="member">JNumberValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="384" refid="note_8h_1a2499d761e554a80868701a50c2a05f17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1a2499d761e554a80868701a50c2a05f17" kindref="member">JStringValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="385" refid="note_8h_1a3e836494d9b3a6fc4e4b02dc2767df83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3e836494d9b3a6fc4e4b02dc2767df83" kindref="member">JBoolValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="386" refid="note_8h_1ad364de55d4b0e97d6d64e90d8a0eb2ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad364de55d4b0e97d6d64e90d8a0eb2ac" kindref="member">JIntValue</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="387" refid="note_8h_1af6782558e937adf063fa560bf006df99" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af6782558e937adf063fa560bf006df99" kindref="member">JIsNullString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="388" refid="note_8h_1ad16b761dc3cc6c03ca8314e444d01b23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad16b761dc3cc6c03ca8314e444d01b23" kindref="member">JIsExactString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*teststr);</highlight></codeline>
<codeline lineno="389" refid="note_8h_1a072439fc8a9e15edc00300eceac8d35e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a072439fc8a9e15edc00300eceac8d35e" kindref="member">JContainsString</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*substr);</highlight></codeline>
<codeline lineno="390" refid="note_8h_1ac2169d697c34df1b9456f490eb787c8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ac2169d697c34df1b9456f490eb787c8c" kindref="member">JAddBinaryToObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*req,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fieldName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*binaryData,<sp/>uint32_t<sp/>binaryDataLen);</highlight></codeline>
<codeline lineno="391" refid="note_8h_1a77a1c869172c5dd8b93f8e1f54dd78b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a77a1c869172c5dd8b93f8e1f54dd78b5" kindref="member">JGetBinaryFromObject</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fieldName,<sp/>uint8_t<sp/>**retBinaryData,<sp/>uint32_t<sp/>*retBinaryDataLen);</highlight></codeline>
<codeline lineno="392" refid="note_8h_1acf30975898c4673472f59eb97d913712" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1acf30975898c4673472f59eb97d913712" kindref="member">JGetItemName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*<sp/>item);</highlight></codeline>
<codeline lineno="393" refid="note_8h_1aacfb17275b3a24dc751834205db62e79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1aacfb17275b3a24dc751834205db62e79" kindref="member">JAllocString</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="394" refid="note_8h_1ade41b3ffbdfc99fa8a87ae63cfebb2fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="note_8h_1ade41b3ffbdfc99fa8a87ae63cfebb2fa" kindref="member">JType</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="note_8h_1abb2f3b5f9047911dfa9ae2249ae4ad58" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NOT_PRESENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="note_8h_1a1dde42a8f9d06851b91f73dcadb48067" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_BOOL_TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="note_8h_1a33c56f9e059f017b5f73a7207b5f690a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_BOOL_FALSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="note_8h_1a7fd70bf9265ce886f8370b4fb8eebb92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_BOOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JTYPE_BOOL_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="note_8h_1ab65facde73aab39c8c078c8f328badb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="note_8h_1a34cb28204f46e15dc57b5b82181e2e1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NUMBER_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="note_8h_1a73cc27bda4c0d44bffca5dbc353e8d65" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_NUMBER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="note_8h_1a88bdd6cb77b65bec7d1a12d512a021a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_BLANK<sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="note_8h_1a05967fa1a39c824fce62fe31a645ca08" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="note_8h_1ab081e08668cdcbaed0bf2506cb666f9b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_NUMBER<sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="note_8h_1ad5597cf60a093c2986fb5451e69ea43e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_BOOL_TRUE<sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="note_8h_1a9db7f1f3c20bfd4aa66d563cde2d3bef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING_BOOL_FALSE<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="note_8h_1aeba8ddb49a982975aff58fbc5a44b37d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="note_8h_1a7f3ba7ec204fbe5e43714b514236a1c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_OBJECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="note_8h_1a3029c9e9a021cf404acbc2178b94470f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JTYPE_ARRAY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="note_8h_1aaee018574a0e0ddb8292aa4702d9fdf1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aaee018574a0e0ddb8292aa4702d9fdf1" kindref="member">JGetType</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*rsp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*field);</highlight></codeline>
<codeline lineno="412" refid="note_8h_1a39d4dc978cbd0c5d10d287b4ac57b8d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a39d4dc978cbd0c5d10d287b4ac57b8d1" kindref="member">JGetItemType</ref>(<ref refid="struct_j" kindref="compound">J</ref><sp/>*item);</highlight></codeline>
<codeline lineno="413" refid="note_8h_1a791851ed95cd350c24f33af25e7f0af8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a791851ed95cd350c24f33af25e7f0af8" kindref="member">JBaseItemType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="414" refid="note_8h_1a5427874049e8ce6e2211214d93f232c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JGetObjectItemName(j)<sp/>(j-&gt;string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>for<sp/>apps<sp/>that<sp/>wish<sp/>to<sp/>limit<sp/>their<sp/>C<sp/>library<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="note_8h_1a20c36388ecbae9120b19c30118891097" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JNTOA_PRECISION<sp/>(16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="note_8h_1a2554bdccd902653258af24e049abaccb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JNTOA_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(44)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="note_8h_1ae6dda9b360c01c2e654c62a320db56ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1ae6dda9b360c01c2e654c62a320db56ff" kindref="member">JNtoA</ref>(<ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>f,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision);</highlight></codeline>
<codeline lineno="420" refid="note_8h_1a2cc99bbc9c2ede0b85f310a775960f3f" refkind="member"><highlight class="normal"><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1a2cc99bbc9c2ede0b85f310a775960f3f" kindref="member">JAtoN</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**endPtr);</highlight></codeline>
<codeline lineno="421" refid="note_8h_1ad252a60646d12a82000f0bba37067982" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad252a60646d12a82000f0bba37067982" kindref="member">JItoA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="422" refid="note_8h_1ad3ef746249e53f9af8ebaf3ead338b33" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad3ef746249e53f9af8ebaf3ead338b33" kindref="member">JAtoI</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="423" refid="note_8h_1a9c5d969e2bfd9cbda902e6388285e624" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a9c5d969e2bfd9cbda902e6388285e624" kindref="member">JB64EncodeLen</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="424" refid="note_8h_1abd22cd7117763400021d6653a33f0d94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1abd22cd7117763400021d6653a33f0d94" kindref="member">JB64Encode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>coded_dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*plain_src,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_plain_src);</highlight></codeline>
<codeline lineno="425" refid="note_8h_1a53559c7bc512587f6776794a78fc424f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a53559c7bc512587f6776794a78fc424f" kindref="member">JB64DecodeLen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>coded_src);</highlight></codeline>
<codeline lineno="426" refid="note_8h_1a48c6cad9358d4154567949c192445a9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a48c6cad9358d4154567949c192445a9e" kindref="member">JB64Decode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>plain_dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*coded_src);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MD5<sp/>Helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="struct_note_m_d5_context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="430" refid="struct_note_m_d5_context_1ad58666280287db0368333c2f50465f02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buf[4];</highlight></codeline>
<codeline lineno="431" refid="struct_note_m_d5_context_1a79dcc9210c65fe4f31eb4295b2fc9510" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bits[2];</highlight></codeline>
<codeline lineno="432" refid="struct_note_m_d5_context_1af22373f810c98e50af1890c0a5e8cfa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>in[64];</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}<sp/><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref>;</highlight></codeline>
<codeline lineno="434" refid="note_8h_1ada955eca3890263865a0f8b15afc052d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_MD5_HASH_SIZE<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="note_8h_1a1bb87c25941d1a303245efbe489929e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_MD5_HASH_STRING_SIZE<sp/>(((NOTE_MD5_HASH_SIZE)*2)+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="note_8h_1af22f3a3c0071c07b3765df7907301c9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af22f3a3c0071c07b3765df7907301c9f" kindref="member">NoteMD5Init</ref>(<ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="437" refid="note_8h_1ae70580a3b6b7d93590e84a46b4035fa9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ae70580a3b6b7d93590e84a46b4035fa9" kindref="member">NoteMD5Update</ref>(<ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="438" refid="note_8h_1ad1aef239c14e207376fff97a9269b569" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad1aef239c14e207376fff97a9269b569" kindref="member">NoteMD5Final</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*digest,<sp/><ref refid="struct_note_m_d5_context" kindref="compound">NoteMD5Context</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="439" refid="note_8h_1a7a52d858400f4634e7be440a5753967e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a7a52d858400f4634e7be440a5753967e" kindref="member">NoteMD5Transform</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buf[4],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inraw[64]);</highlight></codeline>
<codeline lineno="440" refid="note_8h_1a789bebabb0a08fe02ccea85aa917488d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a789bebabb0a08fe02ccea85aa917488d" kindref="member">NoteMD5Hash</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*retHash);</highlight></codeline>
<codeline lineno="441" refid="note_8h_1a54de4da750412f3f2192e1ff453810ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a54de4da750412f3f2192e1ff453810ab" kindref="member">NoteMD5HashString</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strbuf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="442" refid="note_8h_1a095d52cf0bc437922a8104cb97445d29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a095d52cf0bc437922a8104cb97445d29" kindref="member">NoteMD5HashToString</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hash,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strbuf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buflen);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>High-level<sp/>helper<sp/>functions<sp/>that<sp/>are<sp/>both<sp/>useful<sp/>and<sp/>serve<sp/>to<sp/>show<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>how<sp/>to<sp/>call<sp/>the<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="note_8h_1a10c81f1c0470f4b3cd1c877183163815" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a10c81f1c0470f4b3cd1c877183163815" kindref="member">NoteBinaryCodecDecode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*encData,<sp/>uint32_t<sp/>encDataLen,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*decBuf,<sp/>uint32_t<sp/>decBufSize);</highlight></codeline>
<codeline lineno="448" refid="note_8h_1a91a381b28624b7d7a5b7c59cea31e40f" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a91a381b28624b7d7a5b7c59cea31e40f" kindref="member">NoteBinaryCodecEncode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*decData,<sp/>uint32_t<sp/>decDataLen,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*encBuf,<sp/>uint32_t<sp/>encBufSize);</highlight></codeline>
<codeline lineno="450" refid="note_8h_1a5db0bc71463c613425debfb34fa38794" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a5db0bc71463c613425debfb34fa38794" kindref="member">NoteBinaryCodecMaxDecodedLength</ref>(uint32_t<sp/>bufferSize);</highlight></codeline>
<codeline lineno="451" refid="note_8h_1a126a4cb7f30d49518bd2552902099634" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a126a4cb7f30d49518bd2552902099634" kindref="member">NoteBinaryCodecMaxEncodedLength</ref>(uint32_t<sp/>unencodedLength);</highlight></codeline>
<codeline lineno="452" refid="note_8h_1afe6fc60626aff39d8daa732d5cd98acc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1afe6fc60626aff39d8daa732d5cd98acc" kindref="member">NoteBinaryStoreDecodedLength</ref>(uint32_t<sp/>*len);</highlight></codeline>
<codeline lineno="453" refid="note_8h_1a7f645124333a941eccdba3fbc70381f1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1a7f645124333a941eccdba3fbc70381f1" kindref="member">NoteBinaryStoreEncodedLength</ref>(uint32_t<sp/>*len);</highlight></codeline>
<codeline lineno="454" refid="note_8h_1a0a6303c68a7d3fec63ed94e540c349b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1a0a6303c68a7d3fec63ed94e540c349b4" kindref="member">NoteBinaryStoreReceive</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>bufLen,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>decodedOffset,<sp/>uint32_t<sp/>decodedLen);</highlight></codeline>
<codeline lineno="456" refid="note_8h_1a4b0744fcac784957345f532646a81c10" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1a4b0744fcac784957345f532646a81c10" kindref="member">NoteBinaryStoreReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457" refid="note_8h_1afdad71c4316f98ed2502d632846edf76" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="note_8h_1afdad71c4316f98ed2502d632846edf76" kindref="member">NoteBinaryStoreTransmit</ref>(uint8_t<sp/>*unencodedData,<sp/>uint32_t<sp/>unencodedLen,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bufLen,<sp/>uint32_t<sp/>notecardOffset);</highlight></codeline>
<codeline lineno="459" refid="note_8h_1a2e8d519c15479dfaf09566ed97ec3711" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="note_8h_1a2e8d519c15479dfaf09566ed97ec3711" kindref="member">NoteSetSTSecs</ref>(uint32_t<sp/>secs);</highlight></codeline>
<codeline lineno="460" refid="note_8h_1afc76a1b0c6b4dfa1ab2e7c3d6286583e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1afc76a1b0c6b4dfa1ab2e7c3d6286583e" kindref="member">NoteTimeValid</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461" refid="note_8h_1abf11915def4e2d9b1e54cb63d13e95e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1abf11915def4e2d9b1e54cb63d13e95e2" kindref="member">NoteTimeValidST</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462" refid="note_8h_1a0d930f1361f45030bc3638197b329bcb" refkind="member"><highlight class="normal"><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref><sp/><ref refid="note_8h_1a0d930f1361f45030bc3638197b329bcb" kindref="member">NoteTime</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463" refid="note_8h_1a1f834110044f5d4586ad98bde88084d6" refkind="member"><highlight class="normal"><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref><sp/><ref refid="note_8h_1a1f834110044f5d4586ad98bde88084d6" kindref="member">NoteTimeST</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464" refid="note_8h_1af5568df79a7d26a8807b54853a56b921" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af5568df79a7d26a8807b54853a56b921" kindref="member">NoteTimeRefreshMins</ref>(uint32_t<sp/>mins);</highlight></codeline>
<codeline lineno="465" refid="note_8h_1a09596cfe3e377e92f4ebf6700e3ac990" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a09596cfe3e377e92f4ebf6700e3ac990" kindref="member">NoteTimeSet</ref>(<ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref><sp/>secondsUTC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*zone,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*country,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*area);</highlight></codeline>
<codeline lineno="466" refid="note_8h_1a57534ae715e262dd91a55bd71de37631" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a57534ae715e262dd91a55bd71de37631" kindref="member">NoteLocalTimeST</ref>(uint16_t<sp/>*retYear,<sp/>uint8_t<sp/>*retMonth,<sp/>uint8_t<sp/>*retDay,<sp/>uint8_t<sp/>*retHour,<sp/>uint8_t<sp/>*retMinute,<sp/>uint8_t<sp/>*retSecond,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retWeekday,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retZone);</highlight></codeline>
<codeline lineno="467" refid="note_8h_1ade2325739300181a0fad13e83f377ac1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ade2325739300181a0fad13e83f377ac1" kindref="member">NoteRegion</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retCountry,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retArea,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**retZone,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*retZoneOffset);</highlight></codeline>
<codeline lineno="468" refid="note_8h_1a544f2aeaa9bbd229ab173f8e9ba42dc5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a544f2aeaa9bbd229ab173f8e9ba42dc5" kindref="member">NoteLocationValid</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errbuf,<sp/>uint32_t<sp/>errbuflen);</highlight></codeline>
<codeline lineno="469" refid="note_8h_1aa1fd37b1100f616b178fc6c0bcd18292" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa1fd37b1100f616b178fc6c0bcd18292" kindref="member">NoteLocationValidST</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errbuf,<sp/>uint32_t<sp/>errbuflen);</highlight></codeline>
<codeline lineno="470" refid="note_8h_1a3188b2609ac87faadfb0ec5cb9b158bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3188b2609ac87faadfb0ec5cb9b158bf" kindref="member">NoteTurboIO</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="471" refid="note_8h_1a3c4baf03d1d9c122772a767e5929c0a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3c4baf03d1d9c122772a767e5929c0a6" kindref="member">NoteGetEnvInt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>defaultVal);</highlight></codeline>
<codeline lineno="472" refid="note_8h_1af6f3d1929a16c26050550f01d69de9a9" refkind="member"><highlight class="normal"><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/><ref refid="note_8h_1af6f3d1929a16c26050550f01d69de9a9" kindref="member">NoteGetEnvNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>defaultVal);</highlight></codeline>
<codeline lineno="473" refid="note_8h_1a84b63daf99110b90e0e9cad94df694ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a84b63daf99110b90e0e9cad94df694ff" kindref="member">NoteGetEnv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*defaultVal,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>uint32_t<sp/>buflen);</highlight></codeline>
<codeline lineno="474" refid="note_8h_1af7edd00b0a1764be80585ca6b99e8045" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1af7edd00b0a1764be80585ca6b99e8045" kindref="member">NoteSetEnvDefault</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf);</highlight></codeline>
<codeline lineno="475" refid="note_8h_1a43932b5cf2ba57357efd5de109c288d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a43932b5cf2ba57357efd5de109c288d3" kindref="member">NoteSetEnvDefaultNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>defaultVal);</highlight></codeline>
<codeline lineno="476" refid="note_8h_1ae4d28e0bc6231f500f7cd03101eb94ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ae4d28e0bc6231f500f7cd03101eb94ed" kindref="member">NoteSetEnvDefaultInt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*variable,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>defaultVal);</highlight></codeline>
<codeline lineno="477" refid="note_8h_1ad479c8e6d2c17ed58f96b9aa234ad81d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad479c8e6d2c17ed58f96b9aa234ad81d" kindref="member">NoteIsConnected</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478" refid="note_8h_1aa1cce9855703b1b8a5cc856a84378c45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aa1cce9855703b1b8a5cc856a84378c45" kindref="member">NoteIsConnectedST</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479" refid="note_8h_1a387befb0abe72b215645a6650ea7e72f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a387befb0abe72b215645a6650ea7e72f" kindref="member">NoteGetNetStatus</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen);</highlight></codeline>
<codeline lineno="480" refid="note_8h_1ab9c78d2fef7a116ccc22ced6a9304fb1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab9c78d2fef7a116ccc22ced6a9304fb1" kindref="member">NoteGetVersion</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*versionBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>versionBufLen);</highlight></codeline>
<codeline lineno="481" refid="note_8h_1a711d1c4cb256e29e34853959d4f032cc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a711d1c4cb256e29e34853959d4f032cc" kindref="member">NoteGetLocation</ref>(<ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>*retLat,<sp/><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>*retLon,<sp/><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref><sp/>*time,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen);</highlight></codeline>
<codeline lineno="482" refid="note_8h_1a54f0c0ac25d91cdff09d4c374f4b9393" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a54f0c0ac25d91cdff09d4c374f4b9393" kindref="member">NoteSetLocation</ref>(<ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>lat,<sp/><ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>lon);</highlight></codeline>
<codeline lineno="483" refid="note_8h_1aafa429043e07e78852045017c75392ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aafa429043e07e78852045017c75392ae" kindref="member">NoteClearLocation</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484" refid="note_8h_1a1f5e4d1d5d4c91ee2409686e59e28e76" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a1f5e4d1d5d4c91ee2409686e59e28e76" kindref="member">NoteGetLocationMode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modeBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeBufLen);</highlight></codeline>
<codeline lineno="485" refid="note_8h_1a38ab54badbef76dd436d557889eaaf83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a38ab54badbef76dd436d557889eaaf83" kindref="member">NoteSetLocationMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,<sp/>uint32_t<sp/>seconds);</highlight></codeline>
<codeline lineno="486" refid="note_8h_1acf36d7c23420551e51597554a69f97c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1acf36d7c23420551e51597554a69f97c3" kindref="member">NoteGetServiceConfig</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*productBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>productBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*serviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>serviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*deviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*snBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snBufLen);</highlight></codeline>
<codeline lineno="487" refid="note_8h_1ac5989f17e99b8f154fe4318bb7bcf73d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ac5989f17e99b8f154fe4318bb7bcf73d" kindref="member">NoteGetServiceConfigST</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*productBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>productBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*serviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>serviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*deviceBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*snBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snBufLen);</highlight></codeline>
<codeline lineno="488" refid="note_8h_1adfe58a53ab4a4de6f6b00092494330ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1adfe58a53ab4a4de6f6b00092494330ab" kindref="member">NoteGetStatus</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen,<sp/><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref><sp/>*bootTime,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retUSB,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retSignals);</highlight></codeline>
<codeline lineno="489" refid="note_8h_1ad873ec5c640174f673ceabad89b8f030" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad873ec5c640174f673ceabad89b8f030" kindref="member">NoteGetStatusST</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*statusBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>statusBufLen,<sp/><ref refid="note_8h_1a73e6b96efcfe5e30e01ecf2c53444a8e" kindref="member">JTIME</ref><sp/>*bootTime,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retUSB,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*retSignals);</highlight></codeline>
<codeline lineno="490" refid="note_8h_1a5495b9b5807536807987af253ee2b918" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a5495b9b5807536807987af253ee2b918" kindref="member">NoteSleep</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stateb64,<sp/>uint32_t<sp/>seconds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modes);</highlight></codeline>
<codeline lineno="491" refid="note_8h_1ab6689989662882c9140822e67d0ae84d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ab6689989662882c9140822e67d0ae84d" kindref="member">NoteWake</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stateLen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*state);</highlight></codeline>
<codeline lineno="492" refid="note_8h_1a0a6818960d5dc59c9dc15ec12c8eca67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a0a6818960d5dc59c9dc15ec12c8eca67" kindref="member">NoteFactoryReset</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deleteConfigSettings);</highlight></codeline>
<codeline lineno="493" refid="note_8h_1ac4e9ce3c9b56c05603c3a87377abfdda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ac4e9ce3c9b56c05603c3a87377abfdda" kindref="member">NoteSetSerialNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sn);</highlight></codeline>
<codeline lineno="494" refid="note_8h_1a68e1b388237b6d156f07299c8fdea24b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a68e1b388237b6d156f07299c8fdea24b" kindref="member">NoteSetProductID</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*productID);</highlight></codeline>
<codeline lineno="495" refid="note_8h_1aedfe8eec797fa14b80c9a836a3267a69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aedfe8eec797fa14b80c9a836a3267a69" kindref="member">NoteSetUploadMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uploadMode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uploadMinutes,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align);</highlight></codeline>
<codeline lineno="496" refid="note_8h_1a65b9120ff5b755405d76a3ba992197ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a65b9120ff5b755405d76a3ba992197ac" kindref="member">NoteSetSyncMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uploadMode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uploadMinutes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>downloadMinutes,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sync);</highlight></codeline>
<codeline lineno="497" refid="note_8h_1a2468ed01b499ba8fc72fefa3500cad90" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NoteSend<sp/>NoteAdd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="note_8h_1a859c73fcda95741f545f2996d0d4d50a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a859c73fcda95741f545f2996d0d4d50a" kindref="member">NoteAdd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*target,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*body,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>urgent);</highlight></codeline>
<codeline lineno="499" refid="note_8h_1a740e04f22326f5f421bf3c86d5fd1ed3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a740e04f22326f5f421bf3c86d5fd1ed3" kindref="member">NoteSendToRoute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*method,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*routeAlias,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*notefile,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*body);</highlight></codeline>
<codeline lineno="500" refid="note_8h_1ad29039cfe90306e391d8a85a0df1d69f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad29039cfe90306e391d8a85a0df1d69f" kindref="member">NoteGetVoltage</ref>(<ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>*voltage);</highlight></codeline>
<codeline lineno="501" refid="note_8h_1a33a8a42563cc3dc4d3bda44144d73784" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a33a8a42563cc3dc4d3bda44144d73784" kindref="member">NoteGetTemperature</ref>(<ref refid="note_8h_1ad5d4019548d2d9f57b0bf22c8293a19b" kindref="member">JNUMBER</ref><sp/>*temp);</highlight></codeline>
<codeline lineno="502" refid="note_8h_1a289e6d70e17615cf927a9094080139f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a289e6d70e17615cf927a9094080139f1" kindref="member">NoteGetContact</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*orgBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orgBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*roleBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>roleBufLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*emailBuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>emailBufLen);</highlight></codeline>
<codeline lineno="503" refid="note_8h_1aad1a6d6d04a1cac3339022d1068df201" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1aad1a6d6d04a1cac3339022d1068df201" kindref="member">NoteSetContact</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nameBuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*orgBuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*roleBuf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*emailBuf);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Definitions<sp/>necessary<sp/>for<sp/>payload<sp/>descriptor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NP_SEGTYPE_LEN<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="note_8h_1a21ad183750f7d93528d707af3339b200" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NP_SEGLEN_LEN<sp/>sizeof(uint32_t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="note_8h_1a6bd262ffa71c6e153f70b1fcbfbe9150" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NP_SEGHDR_LEN<sp/>(NP_SEGTYPE_LEN<sp/>+<sp/>NP_SEGLEN_LEN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="struct_note_payload_desc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="510" refid="struct_note_payload_desc_1a05effe66a8c405ee11e9b1d8758d322a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_note_payload_desc_1a05effe66a8c405ee11e9b1d8758d322a" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="511" refid="struct_note_payload_desc_1afb8e03b00c614d92cde2695938cd8ef1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_note_payload_desc_1afb8e03b00c614d92cde2695938cd8ef1" kindref="member">alloc</ref>;</highlight></codeline>
<codeline lineno="512" refid="struct_note_payload_desc_1ad28917f881294856b621632d318f5ea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_note_payload_desc_1ad28917f881294856b621632d318f5ea7" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}<sp/><ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref>;</highlight></codeline>
<codeline lineno="514" refid="note_8h_1a42f5f4c8090a088fbc0d6b68646e9c0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a42f5f4c8090a088fbc0d6b68646e9c0e" kindref="member">NotePayloadSaveAndSleep</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/>uint32_t<sp/>seconds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modes);</highlight></codeline>
<codeline lineno="515" refid="note_8h_1a62202e752d3e6b75d0beebbc0ebd29e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a62202e752d3e6b75d0beebbc0ebd29e9" kindref="member">NotePayloadRetrieveAfterSleep</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc);</highlight></codeline>
<codeline lineno="516" refid="note_8h_1ae8b19866d8b472354b80679fcd03d3bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ae8b19866d8b472354b80679fcd03d3bf" kindref="member">NotePayloadSet</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/>buflen);</highlight></codeline>
<codeline lineno="517" refid="note_8h_1a516e80912a7b5874770888765db7347e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a516e80912a7b5874770888765db7347e" kindref="member">NotePayloadFree</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc);</highlight></codeline>
<codeline lineno="518" refid="note_8h_1ad7c0fdd390eaf4338117bba38a92cdce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1ad7c0fdd390eaf4338117bba38a92cdce" kindref="member">NotePayloadAddSegment</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>segtype[<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref>],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdata,<sp/>uint32_t<sp/>plen);</highlight></codeline>
<codeline lineno="519" refid="note_8h_1a10bb7e445f9515a2289e9ed2dd4485d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a10bb7e445f9515a2289e9ed2dd4485d1" kindref="member">NotePayloadFindSegment</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>segtype[<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref>],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdata,<sp/>uint32_t<sp/>*plen);</highlight></codeline>
<codeline lineno="520" refid="note_8h_1a573bc94dabf3f27220685a8c4d7adce9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a573bc94dabf3f27220685a8c4d7adce9" kindref="member">NotePayloadGetSegment</ref>(<ref refid="struct_note_payload_desc" kindref="compound">NotePayloadDesc</ref><sp/>*desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>segtype[<ref refid="note_8h_1aa77f7c6fe5afd314bc6948e167a8d040" kindref="member">NP_SEGTYPE_LEN</ref>],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdata,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hard-wired<sp/>constants<sp/>used<sp/>to<sp/>specify<sp/>field<sp/>types<sp/>when<sp/>creating<sp/>note<sp/>templates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="note_8h_1a18eddc8e4f0522a438b6475058e5ad32" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TBOOL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="note_8h_1a6186fd56a505b415b2ab2f50233c157f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="note_8h_1a91ba007692878e4a02154c04ae390f39" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="note_8h_1a2011bffb5bae1513306b0615f885ecc3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT24<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="note_8h_1ab1bbd49f40d8d7722f8ca7347bd83513" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4-byte<sp/>signed<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="note_8h_1a8437f26572687d03e061a0113af0cb0c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINT64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8-byte<sp/>signed<sp/>integer<sp/>(note-c<sp/>support<sp/>depends<sp/>upon<sp/>platform)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="note_8h_1ade35b42a310f0bde7e6741c9ee7673b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="note_8h_1a1d8690165d7e8509f58efd34fd45041e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="note_8h_1a5a5e5e167c6cb206ea61d86cf030adb5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT24<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="note_8h_1a7f2af02b4c87ac0d4804ad8b5437d48d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TUINT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4-byte<sp/>unsigned<sp/>integer<sp/>(requires<sp/>notecard<sp/>firmware<sp/>&gt;=<sp/>build<sp/>14444)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="note_8h_1a154fa3416f08de2b073fe6aef8c0104d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TFLOAT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-byte<sp/>IEEE<sp/>754<sp/>floating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="note_8h_1a340a46ea4717ab906196ee4ada26c0a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TFLOAT32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4-byte<sp/>IEEE<sp/>754<sp/>floating<sp/>point<sp/>(a.k.a.<sp/>&quot;float&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="note_8h_1a05a270325382e9d22be6317760dc800a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TFLOAT64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8-byte<sp/>IEEE<sp/>754<sp/>floating<sp/>point<sp/>(a.k.a.<sp/>&quot;double&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="note_8h_1ad7d1fa7b9a59ec5eba97dd784cbc29e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TSTRING(N)<sp/><sp/><sp/><sp/><sp/><sp/>_NOTE_C_STRINGIZE(N)<sp/></highlight><highlight class="comment">//<sp/>UTF-8<sp/>text<sp/>of<sp/>N<sp/>bytes<sp/>maximum<sp/>(fixed-length<sp/>reserved<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="note_8h_1a465bf5c669736c4f4d64d185d736c5bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TSTRINGV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NOTE_C_STRINGIZE(0)<sp/></highlight><highlight class="comment">//<sp/>variable-length<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="note_8h_1a5de0a3a1b648b9d5c2d0a7c608264f6a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a5de0a3a1b648b9d5c2d0a7c608264f6a" kindref="member">NoteTemplate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*notefileID,<sp/><ref refid="struct_j" kindref="compound">J</ref><sp/>*templateBody);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>C-callable<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/note-c/note-c/note.h"/>
  </compounddef>
</doxygen>
