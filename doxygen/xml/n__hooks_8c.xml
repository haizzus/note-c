<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="n__hooks_8c" kind="file" language="C++">
    <compoundname>n_hooks.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">n_lib.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>n_lib.h</label>
      </node>
      <node id="1">
        <label>/home/runner/work/note-c/note-c/n_hooks.c</label>
        <link refid="n__hooks_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="n__hooks_8c_1ab037e3109a302fc9719fea71f6734b32" prot="public" static="no">
        <name>NOTE_SHOW_MALLOC</name>
        <initializer>false</initializer>
        <briefdescription>
<para>Show malloc operations for debugging in very low mem environments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="30" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__hooks_8c_1ac12390f151d06023c61fbc03ffba5a13" prot="public" static="no">
        <name>interfaceNone</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="37" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__hooks_8c_1a61d64f8102ea568c7ed64584369c1779" prot="public" static="no">
        <name>interfaceSerial</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="38" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n__hooks_8c_1a27a151021020827bdb6304575544bb47" prot="public" static="no">
        <name>interfaceI2C</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="39" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* nNoteResetFn) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>nNoteResetFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="176" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="n__hooks_8c_1a6a20676058192f16965f0fda8b9489e3" prot="public" static="no">
        <type>const char *(*</type>
        <definition>typedef const char*(* nTransactionFn) (const char *, size_t, char **, size_t)</definition>
        <argsstring>)(const char *, size_t, char **, size_t)</argsstring>
        <name>nTransactionFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="177" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="n__hooks_8c_1a5a110ffb2bbf7334712ef773fd83329a" prot="public" static="no">
        <type>const char *(*</type>
        <definition>typedef const char*(* nReceiveFn) (uint8_t *, uint32_t *, bool, size_t, uint32_t *)</definition>
        <argsstring>)(uint8_t *, uint32_t *, bool, size_t, uint32_t *)</argsstring>
        <name>nReceiveFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="178" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="n__hooks_8c_1a4adc8af3e4ea403988d458615cf6f845" prot="public" static="no">
        <type>const char *(*</type>
        <definition>typedef const char*(* nTransmitFn) (uint8_t *, uint32_t, bool)</definition>
        <argsstring>)(uint8_t *, uint32_t, bool)</argsstring>
        <name>nTransmitFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="179" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" kindref="member">debugOutputFn</ref></type>
        <definition>debugOutputFn hookDebugOutput</definition>
        <argsstring></argsstring>
        <name>hookDebugOutput</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s debug interface, if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="47" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookLockI2C</definition>
        <argsstring></argsstring>
        <name>hookLockI2C</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C lock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="53" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookUnlockI2C</definition>
        <argsstring></argsstring>
        <name>hookUnlockI2C</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C unlock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="59" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookLockNote</definition>
        <argsstring></argsstring>
        <name>hookLockNote</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Notecard lock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="65" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
        <definition>mutexFn hookUnlockNote</definition>
        <argsstring></argsstring>
        <name>hookUnlockNote</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Notecard lock function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="71" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a2862300245c7f82df19c4f3a3a79f759" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a294656e8c061b533f96003de5e4687fb" kindref="member">txnStartFn</ref></type>
        <definition>txnStartFn hookTransactionStart</definition>
        <argsstring></argsstring>
        <name>hookTransactionStart</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s transaction initiation function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="77" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1aee65145a7f7916880913d039ee9dec70" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" kindref="member">txnStopFn</ref></type>
        <definition>txnStopFn hookTransactionStop</definition>
        <argsstring></argsstring>
        <name>hookTransactionStop</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s transaction completion function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="83" column="11" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
        <definition>mallocFn hookMalloc</definition>
        <argsstring></argsstring>
        <name>hookMalloc</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s memory allocation function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="89" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
        <definition>freeFn hookFree</definition>
        <argsstring></argsstring>
        <name>hookFree</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s memory free function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="95" column="8" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
        <definition>delayMsFn hookDelayMs</definition>
        <argsstring></argsstring>
        <name>hookDelayMs</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s delay function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="101" column="11" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
        <definition>getMsFn hookGetMs</definition>
        <argsstring></argsstring>
        <name>hookGetMs</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s millis timing function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="107" column="9" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t hookActiveInterface</definition>
        <argsstring></argsstring>
        <name>hookActiveInterface</name>
        <initializer>= <ref refid="n__hooks_8c_1ac12390f151d06023c61fbc03ffba5a13" kindref="member">interfaceNone</ref></initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s current active interface. Value is one of: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>interfaceNone = 0 (default)</para>
</listitem><listitem><para>interfaceSerial = 1</para>
</listitem><listitem><para>interfaceI2C = 2 </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="117" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a8b924ad75dc42dbb9f55e39bbb383e53" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
        <definition>serialResetFn hookSerialReset</definition>
        <argsstring></argsstring>
        <name>hookSerialReset</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial reset function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="124" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1adc5dbf6a449a062dc2ce585b377e01c8" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
        <definition>serialTransmitFn hookSerialTransmit</definition>
        <argsstring></argsstring>
        <name>hookSerialTransmit</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial transmit function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="130" column="18" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a85a763552201e904319a46d7bbaffb2f" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
        <definition>serialAvailableFn hookSerialAvailable</definition>
        <argsstring></argsstring>
        <name>hookSerialAvailable</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial data available function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="136" column="19" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1abb53cb4c8b5875405005a10f8e5dd276" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
        <definition>serialReceiveFn hookSerialReceive</definition>
        <argsstring></argsstring>
        <name>hookSerialReceive</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s Serial receive function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="142" column="17" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1ad55843178b5a1e1ecfba8e9b53544c57" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t i2cAddress</definition>
        <argsstring></argsstring>
        <name>i2cAddress</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="149" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t i2cMax</definition>
        <argsstring></argsstring>
        <name>i2cMax</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C maximum segment size, in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="155" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a57e8dca746e7d85e7eabfb0b7bee4572" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
        <definition>i2cResetFn hookI2CReset</definition>
        <argsstring></argsstring>
        <name>hookI2CReset</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C reset function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="161" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1aa0d2d6474eba5963389d55f795968cb6" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
        <definition>i2cTransmitFn hookI2CTransmit</definition>
        <argsstring></argsstring>
        <name>hookI2CTransmit</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s transmit function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="167" column="15" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a263455cdbf1fc17b92a975c7535f1950" prot="public" static="no" mutable="no">
        <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
        <definition>i2cReceiveFn hookI2CReceive</definition>
        <argsstring></argsstring>
        <name>hookI2CReceive</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Hook for the calling platform&apos;s I2C receive function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="173" column="14" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a8737ad3248b6dac65e86ef1a25006214" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" kindref="member">nNoteResetFn</ref></type>
        <definition>nNoteResetFn notecardReset</definition>
        <argsstring></argsstring>
        <name>notecardReset</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="180" column="21" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a53f1359b15079660b271b90d656ed834" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1a6a20676058192f16965f0fda8b9489e3" kindref="member">nTransactionFn</ref></type>
        <definition>nTransactionFn notecardTransaction</definition>
        <argsstring></argsstring>
        <name>notecardTransaction</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="181" column="23" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1a6592398c3b60ccf3c888358512213f2e" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1a5a110ffb2bbf7334712ef773fd83329a" kindref="member">nReceiveFn</ref></type>
        <definition>nReceiveFn notecardChunkedReceive</definition>
        <argsstring></argsstring>
        <name>notecardChunkedReceive</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="182" column="19" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="n__hooks_8c_1ae93982124c2907135e221064abb3abcc" prot="public" static="yes" mutable="no">
        <type><ref refid="n__hooks_8c_1a4adc8af3e4ea403988d458615cf6f845" kindref="member">nTransmitFn</ref></type>
        <definition>nTransmitFn notecardChunkedTransmit</definition>
        <argsstring></argsstring>
        <name>notecardChunkedTransmit</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="183" column="20" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="n__hooks_8c_1a57a711029fed4148da73679ff2c8a154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDefault</definition>
        <argsstring>(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn)</argsstring>
        <name>NoteSetFnDefault</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>millisfn</declname>
        </param>
        <briefdescription>
<para>Set the default memory and timing hooks if they aren&apos;t already set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default memory allocation <computeroutput>malloc</computeroutput> function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default memory free function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default delay function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The default &apos;millis&apos; function to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="194" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="194" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ad334248744d5387da78ca09c3498f397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFn</definition>
        <argsstring>(mallocFn mallocHook, freeFn freeHook, delayMsFn delayMsHook, getMsFn getMsHook)</argsstring>
        <name>NoteSetFn</name>
        <param>
          <type><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref></type>
          <declname>mallocHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref></type>
          <declname>freeHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref></type>
          <declname>delayMsHook</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref></type>
          <declname>getMsHook</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific memory and timing hooks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mallocHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific memory allocation function (i.e. <computeroutput>malloc</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freeHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific memory free function (i.e. <computeroutput>free</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific millisecond delay function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getMsHook</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific millisecond counter function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="219" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a6844f5cd4d6e38d65c090dba954321b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDebugOutput</definition>
        <argsstring>(debugOutputFn fn)</argsstring>
        <name>NoteSetFnDebugOutput</name>
        <param>
          <type><ref refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" kindref="member">debugOutputFn</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific debug output function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to call for debug output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="234" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a0d80498206dfae3b9a056b85b88695e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool noteIsDebugOutputActive</definition>
        <argsstring>(void)</argsstring>
        <name>noteIsDebugOutputActive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if a debug output function has been set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether a debug ouput function was provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="246" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a946facc30c7f3b5f1820db01fde9fa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnTransaction</definition>
        <argsstring>(txnStartFn startFn, txnStopFn stopFn)</argsstring>
        <name>NoteSetFnTransaction</name>
        <param>
          <type><ref refid="note_8h_1a294656e8c061b533f96003de5e4687fb" kindref="member">txnStartFn</ref></type>
          <declname>startFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" kindref="member">txnStopFn</ref></type>
          <declname>stopFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific transaction initiation/completion fn&apos;s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific transaction initiation function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stopFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific transaction completion function to use. to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="259" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="259" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a81210c0d43535f1945083f7b3fcad67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn, mutexFn lockNotefn, mutexFn unlockNotefn)</argsstring>
        <name>NoteSetFnMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockNotefn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockNotefn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific mutex functions for I2C and the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C lock function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C unlock function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard lock function to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockNotefn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard unlock function to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="276" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a6879f42e34e075aec82b499fd5ddd12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2CMutex</definition>
        <argsstring>(mutexFn lockI2Cfn, mutexFn unlockI2Cfn)</argsstring>
        <name>NoteSetFnI2CMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockI2Cfn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockI2Cfn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific mutex functions for I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockI2Cfn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C unlock function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="290" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a534aa37f7e753dd06a847f429f8e743f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnNoteMutex</definition>
        <argsstring>(mutexFn lockFn, mutexFn unlockFn)</argsstring>
        <name>NoteSetFnNoteMutex</name>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>lockFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref></type>
          <declname>unlockFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific mutex functions for the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard lock function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unlockFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific Notecard unlock function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="302" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="302" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a85c66fdcef6d9ea044a9adc37af5afa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnSerial</definition>
        <argsstring>(serialResetFn resetFn, serialTransmitFn transmitFn, serialAvailableFn availFn, serialReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnSerial</name>
        <param>
          <type><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref></type>
          <declname>availFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific hooks for communicating with the Notecard over serial. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>availFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial available function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific serial receive function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="317" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="317" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1abeb555883ff039880048164763c3b9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnI2C</definition>
        <argsstring>(uint32_t notecardAddr, uint32_t maxTransmitSize, i2cResetFn resetFn, i2cTransmitFn transmitFn, i2cReceiveFn receiveFn)</argsstring>
        <name>NoteSetFnI2C</name>
        <param>
          <type>uint32_t</type>
          <declname>notecardAddr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxTransmitSize</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref></type>
          <declname>resetFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref></type>
          <declname>transmitFn</declname>
        </param>
        <param>
          <type><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref></type>
          <declname>receiveFn</declname>
        </param>
        <briefdescription>
<para>Set the platform-specific hooks for communicating with the Notecard over I2C, as well as the I2C address of the Notecard and maximum transmission size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notecardAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>The I2C address of the Notecard. Pass 0 to use the default address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxTransmitSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The max number of bytes to send to the Notecard in a single I2C segment. Pass 0 to use the default maximum transmission size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C reset function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmitFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C transmit function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiveFn</parametername>
</parameternamelist>
<parameterdescription>
<para>The platform-specific I2C receive function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="347" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="347" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a8648db242df0d5ac68334ab93ee5fa0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetFnDisabled</definition>
        <argsstring>(void)</argsstring>
        <name>NoteSetFnDisabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set the platform-specific communications method to be disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="371" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="371" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a735b443951ae911c98ddb39c54f0ba7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugIntln</definition>
        <argsstring>(const char *line, int n)</argsstring>
        <name>NoteDebugIntln</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Write a number to the debug stream and output a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A debug string for output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="392" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="392" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ad2104215255468930924e4f3c5eac820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugln</definition>
        <argsstring>(const char *line)</argsstring>
        <name>NoteDebugln</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Write text to the debug stream and output a newline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A debug string for output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="409" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="409" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a2f5d9ab0d7d259363c2b1fc9507968e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebug</definition>
        <argsstring>(const char *line)</argsstring>
        <name>NoteDebug</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Write to the debug stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>A debug string for output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="421" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="421" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevel</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevel</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Write the message to the debug stream, if the level is less than or equal to NOTE_C_LOG_LEVEL. Otherwise, the message is dropped. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level of the message. See the NOTE_C_LOG_LEVEL_* macros in <ref refid="note_8h" kindref="compound">note.h</ref> for possible values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="439" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="439" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aea4a872558f91cfdba679dea15e39b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDebugWithLevelLn</definition>
        <argsstring>(uint8_t level, const char *msg)</argsstring>
        <name>NoteDebugWithLevelLn</name>
        <param>
          <type>uint8_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Same as NoteDebugWithLevel, but add a newline at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level of the message. See the NOTE_C_LOG_LEVEL_* macros in <ref refid="note_8h" kindref="compound">note.h</ref> for possible values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="460" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="460" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a598d2b8e9559691bc17c0a578fd9b71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long unsigned int</type>
        <definition>long unsigned int NoteGetMs</definition>
        <argsstring>(void)</argsstring>
        <name>NoteGetMs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current milliseconds value from the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current milliseconds value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="473" column="19" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="473" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a30ebf8f80fc647865819c842adc53816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteDelayMs</definition>
        <argsstring>(uint32_t ms)</argsstring>
        <name>NoteDelayMs</name>
        <param>
          <type>uint32_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Delay milliseconds using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>the milliseconds delay value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="487" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="487" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aac33ee334208aaa53da33809889f0abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void n_htoa32</definition>
        <argsstring>(uint32_t n, char *p)</argsstring>
        <name>n_htoa32</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Convert number to a hex string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to return it into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="502" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="502" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a97d5a9da7d7d35519c54e90c8bcd9b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* NoteMalloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>NoteMalloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a memory chunk using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to allocate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="548" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="548" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a684906dd58e03a139b98f3a342b5c83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteFree</definition>
        <argsstring>(void *p)</argsstring>
        <name>NoteFree</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Free memory using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the memory address to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="566" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="566" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a195386217d2b20709846d45780af2013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteLockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteLockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="584" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="584" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a2a4589fef84a01f2a1bee1c5a7053fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteUnlockI2C</definition>
        <argsstring>(void)</argsstring>
        <name>NoteUnlockI2C</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlock the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="596" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="596" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a91724ed7e398e2ad2954fc7496414ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noteLockNote</definition>
        <argsstring>(void)</argsstring>
        <name>noteLockNote</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock the Notecard using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="608" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="608" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aeaef70aca07305e46c41c6091afae506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noteUnlockNote</definition>
        <argsstring>(void)</argsstring>
        <name>noteUnlockNote</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlock the Notecard using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="620" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="620" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a31026968acce3c29d9bed1a16606955c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool noteTransactionStart</definition>
        <argsstring>(uint32_t timeoutMs)</argsstring>
        <name>noteTransactionStart</name>
        <param>
          <type>uint32_t</type>
          <declname>timeoutMs</declname>
        </param>
        <briefdescription>
<para>Indicate that we&apos;re initiating a transaction using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="632" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="632" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a710038819ac8776ba26c05b912380182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noteTransactionStop</definition>
        <argsstring>(void)</argsstring>
        <name>noteTransactionStop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Indicate that we&apos;ve completed a transaction using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="645" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="645" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a70ecd2743be8507da5bd82b1fc94074f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* noteActiveInterface</definition>
        <argsstring>(void)</argsstring>
        <name>noteActiveInterface</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the active interface&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="658" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="658" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a5648adfefdf583e2cec1807b44544396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool noteSerialReset</definition>
        <argsstring>(void)</argsstring>
        <name>noteSerialReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset the Serial bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the Serial bus was reset successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="675" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="675" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a7f13dc9ce8037d8e1728c278fa31f789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noteSerialTransmit</definition>
        <argsstring>(uint8_t *text, size_t len, bool flush)</argsstring>
        <name>noteSerialTransmit</name>
        <param>
          <type>uint8_t *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
<para>Transmit bytes over Serial using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flush</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> to flush the bytes upon transmit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="691" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="691" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a4dd1aa50682d8adfcb29900f3af0df7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool noteSerialAvailable</definition>
        <argsstring>(void)</argsstring>
        <name>noteSerialAvailable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if Serial bus is available using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the Serial bus is available to read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="705" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="705" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a16710dbd211bf722a2538ca069c1bc39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char noteSerialReceive</definition>
        <argsstring>(void)</argsstring>
        <name>noteSerialReceive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Obtain a character from the Serial bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A character from the Serial bus. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="720" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="720" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ac0f858f36f53326c84d163a9c555face" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool noteI2CReset</definition>
        <argsstring>(uint16_t DevAddress)</argsstring>
        <name>noteI2CReset</name>
        <param>
          <type>uint16_t</type>
          <declname>DevAddress</declname>
        </param>
        <briefdescription>
<para>Reset the I2C bus using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the I2C bus was reset successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="734" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="734" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a5d9df694d590e90ac6be645445cd29c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* noteI2CTransmit</definition>
        <argsstring>(uint16_t DevAddress, uint8_t *pBuffer, uint16_t Size)</argsstring>
        <name>noteI2CTransmit</name>
        <param>
          <type>uint16_t</type>
          <declname>DevAddress</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
<para>Transmit bytes over I2C using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DevAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C address for transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string from the platform-specific hook, or an error string if the bus is not active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="752" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="752" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a99f3a0e0399cb234c4beffb898857460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* noteI2CReceive</definition>
        <argsstring>(uint16_t DevAddress, uint8_t *pBuffer, uint16_t Size, uint32_t *available)</argsstring>
        <name>noteI2CReceive</name>
        <param>
          <type>uint16_t</type>
          <declname>DevAddress</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>available</declname>
        </param>
        <briefdescription>
<para>Receive bytes from I2C using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DevAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C address for transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>(out) A buffer in which to place received bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Size</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available</parametername>
</parameternamelist>
<parameterdescription>
<para>(out) The number of bytes left to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string from the platform-specific hook, or an error string if the bus is not active. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="771" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="771" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a57dcffb142faaef2714839d27afe5be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CAddress</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CAddress</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the I2C address of the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current I2C address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="785" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="785" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a58d7607711312253b402749133e2933a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NoteSetI2CAddress</definition>
        <argsstring>(uint32_t i2caddress)</argsstring>
        <name>NoteSetI2CAddress</name>
        <param>
          <type>uint32_t</type>
          <declname>i2caddress</declname>
        </param>
        <briefdescription>
<para>Set the I2C address for communication with the Notecard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i2caddress</parametername>
</parameternamelist>
<parameterdescription>
<para>the I2C address to use for the Notecard. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="799" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a35bbb8179be3a72ab7ec302dcbfad9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t NoteI2CMax</definition>
        <argsstring>(void)</argsstring>
        <name>NoteI2CMax</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine the maximum number of bytes for each segment of data sent to the Notecard over I2C. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A 32-bit integer of the maximum number of bytes per I2C segment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="811" column="10" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="811" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a25a3bc894007c69b27c81bd2093c1457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool noteHardReset</definition>
        <argsstring>(void)</argsstring>
        <name>noteHardReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Perform a hard reset on the Notecard using the platform-specific hook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A boolean indicating whether the Notecard has been reset successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="833" column="6" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="833" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1a46919dc17e92cae7ef8421f869ce0a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* noteJSONTransaction</definition>
        <argsstring>(const char *request, size_t reqLen, char **response, size_t timeoutMs)</argsstring>
        <name>noteJSONTransaction</name>
        <param>
          <type>const char *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reqLen</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>response</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>timeoutMs</declname>
        </param>
        <briefdescription>
<para>Perform a JSON request to the Notecard using the currently-set platform hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>A string containing the JSON request object, which MUST BE terminated with a newline character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reqLen</parametername>
</parameternamelist>
<parameterdescription>
<para>the string length of the JSON request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] A c-string buffer that will contain the newline (&apos;<linebreak/>
&apos;) terminated JSON response from the Notercard. If NULL, no response will be captured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time, in milliseconds, to wait for data to arrive. Passing zero (0) disables the timeout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if successful, or an error string if the transaction failed or the hook has not been set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="860" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="860" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1ac546ebc49eb151cc128c58310295a66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* noteChunkedReceive</definition>
        <argsstring>(uint8_t *buffer, uint32_t *size, bool delay, size_t timeoutMs, uint32_t *available)</argsstring>
        <name>noteChunkedReceive</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delay</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>timeoutMs</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>available</declname>
        </param>
        <briefdescription>
<para>Receive bytes over from the Notecard using the currently-set platform hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to receive bytes into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>(in/out)<itemizedlist>
<listitem><para>(in) The size of the buffer in bytes.</para>
</listitem><listitem><para>(out) The length of the received data in bytes. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Respect standard processing delays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time, in milliseconds, to wait for data to arrive. Passing zero (0) disables the timeout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available</parametername>
</parameternamelist>
<parameterdescription>
<para>(in/out)<itemizedlist>
<listitem><para>(in) The amount of bytes to request. Sending zero (0) will initiate a priming query when using the I2C interface.</para>
</listitem><listitem><para>(out) The amount of bytes unable to fit into the provided buffer. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string with an error, or <computeroutput>NULL</computeroutput> if no error ocurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="886" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="886" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="n__hooks_8c_1aeebbd8afc790746f80206493d833a2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* noteChunkedTransmit</definition>
        <argsstring>(uint8_t *buffer, uint32_t size, bool delay)</argsstring>
        <name>noteChunkedTransmit</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Transmit bytes over to the Notecard using the currently-set platform hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer of bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The count of bytes in the buffer to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Respect standard processing delays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A c-string with an error, or <computeroutput>NULL</computeroutput> if no error ocurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/note-c/note-c/n_hooks.c" line="905" column="12" bodyfile="/home/runner/work/note-c/note-c/n_hooks.c" bodystart="905" bodyend="911"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Hooks allow libraries dependent on note-c to provide platform- or MCU-specific functions for common functions like I2C locking/unlocking, memory allocation and freeing, delays, and communicating with the Notecard over I2C and Serial. Using these hooks, note-c is able to manage Notecard transaction logic, and defer to platform functionality, when needed.</para>
<para>Written by Ray Ozzie and Blues Inc. team.</para>
<para>Copyright (c) 2019 Blues Inc. MIT License. Use of this source code is governed by licenses granted by the copyright holder including that found in the <ulink url="https://github.com/blues/note-c/blob/master/LICENSE">LICENSE</ulink> file. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;n_lib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOTE_SHOW_MALLOC<sp/><sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*malloc_show(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Which<sp/>I/O<sp/>port<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>interfaceNone<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>interfaceSerial<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>interfaceI2C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Externalized<sp/>Hooks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" kindref="member">debugOutputFn</ref><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="note_8h_1a294656e8c061b533f96003de5e4687fb" kindref="member">txnStartFn</ref><sp/><ref refid="n__hooks_8c_1a2862300245c7f82df19c4f3a3a79f759" kindref="member">hookTransactionStart</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" kindref="member">txnStopFn</ref><sp/><ref refid="n__hooks_8c_1aee65145a7f7916880913d039ee9dec70" kindref="member">hookTransactionStop</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/><ref refid="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" kindref="member">hookMalloc</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="94"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/><ref refid="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" kindref="member">hookFree</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="100"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/><ref refid="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" kindref="member">hookDelayMs</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/><ref refid="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" kindref="member">hookGetMs</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>=<sp/><ref refid="n__hooks_8c_1ac12390f151d06023c61fbc03ffba5a13" kindref="member">interfaceNone</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="123"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/><ref refid="n__hooks_8c_1a8b924ad75dc42dbb9f55e39bbb383e53" kindref="member">hookSerialReset</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/><ref refid="n__hooks_8c_1adc5dbf6a449a062dc2ce585b377e01c8" kindref="member">hookSerialTransmit</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="135"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/><ref refid="n__hooks_8c_1a85a763552201e904319a46d7bbaffb2f" kindref="member">hookSerialAvailable</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="141"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/><ref refid="n__hooks_8c_1abb53cb4c8b5875405005a10f8e5dd276" kindref="member">hookSerialReceive</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1ad55843178b5a1e1ecfba8e9b53544c57" kindref="member">i2cAddress</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" kindref="member">i2cMax</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="160"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/><ref refid="n__hooks_8c_1a57e8dca746e7d85e7eabfb0b7bee4572" kindref="member">hookI2CReset</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="166"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/><ref refid="n__hooks_8c_1aa0d2d6474eba5963389d55f795968cb6" kindref="member">hookI2CTransmit</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="172"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/><ref refid="n__hooks_8c_1a263455cdbf1fc17b92a975c7535f1950" kindref="member">hookI2CReceive</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>hooks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" kindref="member">nNoteResetFn</ref>)<sp/>(void);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*nTransactionFn)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>size_t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/>size_t);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*nReceiveFn)<sp/>(uint8_t<sp/>*,<sp/>uint32_t<sp/>*,<sp/>bool,<sp/>size_t,<sp/>uint32_t<sp/>*);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>(*nTransmitFn)<sp/>(uint8_t<sp/>*,<sp/>uint32_t,<sp/>bool);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aea3d0ea7684640d1848d2914996faecd" kindref="member">nNoteResetFn</ref><sp/>notecardReset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a6a20676058192f16965f0fda8b9489e3" kindref="member">nTransactionFn</ref><sp/>notecardTransaction<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a5a110ffb2bbf7334712ef773fd83329a" kindref="member">nReceiveFn</ref><sp/>notecardChunkedReceive<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a4adc8af3e4ea403988d458615cf6f845" kindref="member">nTransmitFn</ref><sp/>notecardChunkedTransmit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a57a711029fed4148da73679ff2c8a154" kindref="member">NoteSetFnDefault</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocfn,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freefn,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayfn,<sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>millisfn)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" kindref="member">hookMalloc</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" kindref="member">hookMalloc</ref><sp/>=<sp/>mallocfn;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" kindref="member">hookFree</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" kindref="member">hookFree</ref><sp/>=<sp/>freefn;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" kindref="member">hookDelayMs</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" kindref="member">hookDelayMs</ref><sp/>=<sp/>delayfn;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" kindref="member">hookGetMs</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" kindref="member">hookGetMs</ref><sp/>=<sp/>millisfn;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1ad334248744d5387da78ca09c3498f397" kindref="member">NoteSetFn</ref>(<ref refid="note_8h_1af700faf8575fb2f45c3881786624b4d6" kindref="member">mallocFn</ref><sp/>mallocHook,<sp/><ref refid="note_8h_1a570f0444ac7f08f8d66bd12cf49b662c" kindref="member">freeFn</ref><sp/>freeHook,<sp/><ref refid="note_8h_1a323baf90f21427329bfb7ef9a61c83d7" kindref="member">delayMsFn</ref><sp/>delayMsHook,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a4717d9986b1e1b5db55590abd6fc9910" kindref="member">getMsFn</ref><sp/>getMsHook)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" kindref="member">hookMalloc</ref><sp/>=<sp/>mallocHook;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" kindref="member">hookFree</ref><sp/>=<sp/>freeHook;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" kindref="member">hookDelayMs</ref><sp/>=<sp/>delayMsHook;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" kindref="member">hookGetMs</ref><sp/>=<sp/>getMsHook;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a6844f5cd4d6e38d65c090dba954321b4" kindref="member">NoteSetFnDebugOutput</ref>(<ref refid="note_8h_1a233e9fec868082bb68e23c6e73af67a2" kindref="member">debugOutputFn</ref><sp/>fn)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref><sp/>=<sp/>fn;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="245"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a0d80498206dfae3b9a056b85b88695e9" kindref="member">noteIsDebugOutputActive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="258"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a946facc30c7f3b5f1820db01fde9fa4d" kindref="member">NoteSetFnTransaction</ref>(<ref refid="note_8h_1a294656e8c061b533f96003de5e4687fb" kindref="member">txnStartFn</ref><sp/>startFn,<sp/><ref refid="note_8h_1a5489831ee66f5f8c29021bfceaffb5ec" kindref="member">txnStopFn</ref><sp/>stopFn)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a2862300245c7f82df19c4f3a3a79f759" kindref="member">hookTransactionStart</ref><sp/>=<sp/>startFn;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1aee65145a7f7916880913d039ee9dec70" kindref="member">hookTransactionStop</ref><sp/>=<sp/>stopFn;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="275"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a81210c0d43535f1945083f7b3fcad67a" kindref="member">NoteSetFnMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockNotefn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockNotefn)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>=<sp/>lockI2Cfn;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>=<sp/>unlockI2Cfn;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>=<sp/>lockNotefn;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>=<sp/>unlockNotefn;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a6879f42e34e075aec82b499fd5ddd12a" kindref="member">NoteSetFnI2CMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockI2Cfn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockI2Cfn)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>=<sp/>lockI2Cfn;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>=<sp/>unlockI2Cfn;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a534aa37f7e753dd06a847f429f8e743f" kindref="member">NoteSetFnNoteMutex</ref>(<ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>lockFn,<sp/><ref refid="note_8h_1ac9d4324784f851631c22f78099225463" kindref="member">mutexFn</ref><sp/>unlockFn)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>=<sp/>lockFn;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>=<sp/>unlockFn;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a85c66fdcef6d9ea044a9adc37af5afa7" kindref="member">NoteSetFnSerial</ref>(<ref refid="note_8h_1a75873a7790764116d88f80aaaf23263b" kindref="member">serialResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a02dd02c70f8ef01f9ded212d5630f5e0" kindref="member">serialTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1a58f8d48fe891877b7702a013e63e6991" kindref="member">serialAvailableFn</ref><sp/>availFn,<sp/><ref refid="note_8h_1a9a014c2bc8e94f611f98415b3d6b9569" kindref="member">serialReceiveFn</ref><sp/>receiveFn)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>=<sp/><ref refid="n__hooks_8c_1a61d64f8102ea568c7ed64584369c1779" kindref="member">interfaceSerial</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a8b924ad75dc42dbb9f55e39bbb383e53" kindref="member">hookSerialReset</ref><sp/>=<sp/>resetFn;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1adc5dbf6a449a062dc2ce585b377e01c8" kindref="member">hookSerialTransmit</ref><sp/>=<sp/>transmitFn;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a85a763552201e904319a46d7bbaffb2f" kindref="member">hookSerialAvailable</ref><sp/>=<sp/>availFn;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1abb53cb4c8b5875405005a10f8e5dd276" kindref="member">hookSerialReceive</ref><sp/>=<sp/>receiveFn;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardReset<sp/>=<sp/>serialNoteReset;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardTransaction<sp/>=<sp/>serialNoteTransaction;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardChunkedReceive<sp/>=<sp/>serialChunkedReceive;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardChunkedTransmit<sp/>=<sp/>serialChunkedTransmit;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1abeb555883ff039880048164763c3b9f0" kindref="member">NoteSetFnI2C</ref>(uint32_t<sp/>notecardAddr,<sp/>uint32_t<sp/>maxTransmitSize,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1ab18cc9957da000e5a05db53d4543d26b" kindref="member">i2cResetFn</ref><sp/>resetFn,<sp/><ref refid="note_8h_1a841b338ac017194680b08ec57c179efc" kindref="member">i2cTransmitFn</ref><sp/>transmitFn,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="note_8h_1aef5eac1396470d4d872d979aaf95cbb2" kindref="member">i2cReceiveFn</ref><sp/>receiveFn)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1ad55843178b5a1e1ecfba8e9b53544c57" kindref="member">i2cAddress</ref><sp/>=<sp/>notecardAddr;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" kindref="member">i2cMax</ref><sp/>=<sp/>maxTransmitSize;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>=<sp/><ref refid="n__hooks_8c_1a27a151021020827bdb6304575544bb47" kindref="member">interfaceI2C</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a57e8dca746e7d85e7eabfb0b7bee4572" kindref="member">hookI2CReset</ref><sp/>=<sp/>resetFn;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1aa0d2d6474eba5963389d55f795968cb6" kindref="member">hookI2CTransmit</ref><sp/>=<sp/>transmitFn;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a263455cdbf1fc17b92a975c7535f1950" kindref="member">hookI2CReceive</ref><sp/>=<sp/>receiveFn;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardReset<sp/>=<sp/>i2cNoteReset;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardTransaction<sp/>=<sp/>i2cNoteTransaction;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardChunkedReceive<sp/>=<sp/>i2cChunkedReceive;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardChunkedTransmit<sp/>=<sp/>i2cChunkedTransmit;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="370"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a8648db242df0d5ac68334ab93ee5fa0e" kindref="member">NoteSetFnDisabled</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>=<sp/><ref refid="n__hooks_8c_1ac12390f151d06023c61fbc03ffba5a13" kindref="member">interfaceNone</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardReset<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardTransaction<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardChunkedReceive<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>notecardChunkedTransmit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runtime<sp/>hook<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="391"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a735b443951ae911c98ddb39c54f0ba7a" kindref="member">NoteDebugIntln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Debug(line);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[16];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1ad252a60646d12a82000f0bba37067982" kindref="member">JItoA</ref>(n,<sp/>str);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(str);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(c_newline);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="408"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1ad2104215255468930924e4f3c5eac820" kindref="member">NoteDebugln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(line);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(c_newline);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="420"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a2f5d9ab0d7d259363c2b1fc9507968e9" kindref="member">NoteDebug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(line);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="438"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1adbf027f8ae53aea93f71965a9dbad0d8" kindref="member">NoteDebugWithLevel</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;<sp/><ref refid="note_8h_1ac7f821af4d5b209d37104e2f8038f69c" kindref="member">NOTE_C_LOG_LEVEL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>_Debug(msg);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!NOTE_NODEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="459"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aea4a872558f91cfdba679dea15e39b9c" kindref="member">NoteDebugWithLevelLn</ref>(uint8_t<sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>_DebugWithLevel(level,<sp/>msg);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>_DebugWithLevel(level,<sp/>c_newline);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="472"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a598d2b8e9559691bc17c0a578fd9b71d" kindref="member">NoteGetMs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" kindref="member">hookGetMs</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a06884d23d5f78279deb3a32a43ef4694" kindref="member">hookGetMs</ref>();</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="486"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a30ebf8f80fc647865819c842adc53816" kindref="member">NoteDelayMs</ref>(uint32_t<sp/>ms)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" kindref="member">hookDelayMs</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a18e7b68c9f867dcd0818086f602e932f" kindref="member">hookDelayMs</ref>(ms);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_SHOW_MALLOC<sp/>||<sp/>!defined(NOTE_LOWMEM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="501"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aac33ee334208aaa53da33809889f0abe" kindref="member">n_htoa32</ref>(uint32_t<sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>nibble<sp/>=<sp/>(n<sp/>&gt;&gt;<sp/>28)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nibble<sp/>&gt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>(nibble-10);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>nibble;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="524"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*malloc_show(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[16];</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="note_8h_1ad252a60646d12a82000f0bba37067982" kindref="member">JItoA</ref>(len,<sp/>str);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(</highlight><highlight class="stringliteral">&quot;malloc<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(str);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/><ref refid="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" kindref="member">hookMalloc</ref>(len);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(</highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1aac33ee334208aaa53da33809889f0abe" kindref="member">n_htoa32</ref>((uint32_t)p,<sp/>str);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(str);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="547"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1a97d5a9da7d7d35519c54e90c8bcd9b20" kindref="member">NoteMalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" kindref="member">hookMalloc</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc_show(size);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a82e929c5ea774f51f743646d088c7067" kindref="member">hookMalloc</ref>(size);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="565"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a684906dd58e03a139b98f3a342b5c83b" kindref="member">NoteFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" kindref="member">hookFree</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NOTE_SHOW_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[16];</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1aac33ee334208aaa53da33809889f0abe" kindref="member">n_htoa32</ref>((uint32_t)p,<sp/>str);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(</highlight><highlight class="stringliteral">&quot;free&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a11663e8bd175750e1e06c8201a5478a8" kindref="member">hookDebugOutput</ref>(str);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1ac3f19a99b0efcdf65efdb56ab8c83950" kindref="member">hookFree</ref>(p);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="583"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a195386217d2b20709846d45780af2013" kindref="member">NoteLockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a3f891ce572bd99b70a8c20f999d5942d" kindref="member">hookLockI2C</ref>();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="595"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a2a4589fef84a01f2a1bee1c5a7053fc6" kindref="member">NoteUnlockI2C</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a0188e2a3e1e67ab47bb31ffaca28c0f1" kindref="member">hookUnlockI2C</ref>();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="607"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a91724ed7e398e2ad2954fc7496414ebe" kindref="member">noteLockNote</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a37517c21bcce9f3a523beb50838b1126" kindref="member">hookLockNote</ref>();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="619"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aeaef70aca07305e46c41c6091afae506" kindref="member">noteUnlockNote</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a79775290fccd64212d68cf8bf37fce1a" kindref="member">hookUnlockNote</ref>();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="631"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a31026968acce3c29d9bed1a16606955c" kindref="member">noteTransactionStart</ref>(uint32_t<sp/>timeoutMs)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2862300245c7f82df19c4f3a3a79f759" kindref="member">hookTransactionStart</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a2862300245c7f82df19c4f3a3a79f759" kindref="member">hookTransactionStart</ref>(timeoutMs);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="644"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a710038819ac8776ba26c05b912380182" kindref="member">noteTransactionStop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1aee65145a7f7916880913d039ee9dec70" kindref="member">hookTransactionStop</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1aee65145a7f7916880913d039ee9dec70" kindref="member">hookTransactionStop</ref>();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="657"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1a70ecd2743be8507da5bd82b1fc94074f" kindref="member">noteActiveInterface</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref>)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a61d64f8102ea568c7ed64584369c1779" kindref="member">interfaceSerial</ref>:</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;serial&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a27a151021020827bdb6304575544bb47" kindref="member">interfaceI2C</ref>:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="674"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a5648adfefdf583e2cec1807b44544396" kindref="member">noteSerialReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1a61d64f8102ea568c7ed64584369c1779" kindref="member">interfaceSerial</ref><sp/>&amp;&amp;<sp/><ref refid="n__hooks_8c_1a8b924ad75dc42dbb9f55e39bbb383e53" kindref="member">hookSerialReset</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a8b924ad75dc42dbb9f55e39bbb383e53" kindref="member">hookSerialReset</ref>();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="690"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a7f13dc9ce8037d8e1728c278fa31f789" kindref="member">noteSerialTransmit</ref>(uint8_t<sp/>*text,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flush)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1a61d64f8102ea568c7ed64584369c1779" kindref="member">interfaceSerial</ref><sp/>&amp;&amp;<sp/><ref refid="n__hooks_8c_1adc5dbf6a449a062dc2ce585b377e01c8" kindref="member">hookSerialTransmit</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1adc5dbf6a449a062dc2ce585b377e01c8" kindref="member">hookSerialTransmit</ref>(text,<sp/>len,<sp/>flush);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="704"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a4dd1aa50682d8adfcb29900f3af0df7e" kindref="member">noteSerialAvailable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1a61d64f8102ea568c7ed64584369c1779" kindref="member">interfaceSerial</ref><sp/>&amp;&amp;<sp/><ref refid="n__hooks_8c_1a85a763552201e904319a46d7bbaffb2f" kindref="member">hookSerialAvailable</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a85a763552201e904319a46d7bbaffb2f" kindref="member">hookSerialAvailable</ref>();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="719"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a16710dbd211bf722a2538ca069c1bc39" kindref="member">noteSerialReceive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1a61d64f8102ea568c7ed64584369c1779" kindref="member">interfaceSerial</ref><sp/>&amp;&amp;<sp/><ref refid="n__hooks_8c_1abb53cb4c8b5875405005a10f8e5dd276" kindref="member">hookSerialReceive</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1abb53cb4c8b5875405005a10f8e5dd276" kindref="member">hookSerialReceive</ref>();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="733"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1ac0f858f36f53326c84d163a9c555face" kindref="member">noteI2CReset</ref>(uint16_t<sp/>DevAddress)</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1a27a151021020827bdb6304575544bb47" kindref="member">interfaceI2C</ref><sp/>&amp;&amp;<sp/><ref refid="n__hooks_8c_1a57e8dca746e7d85e7eabfb0b7bee4572" kindref="member">hookI2CReset</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a57e8dca746e7d85e7eabfb0b7bee4572" kindref="member">hookI2CReset</ref>(DevAddress);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="751"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1a5d9df694d590e90ac6be645445cd29c3" kindref="member">noteI2CTransmit</ref>(uint16_t<sp/>DevAddress,<sp/>uint8_t*<sp/>pBuffer,<sp/>uint16_t<sp/>Size)</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1a27a151021020827bdb6304575544bb47" kindref="member">interfaceI2C</ref><sp/>&amp;&amp;<sp/><ref refid="n__hooks_8c_1aa0d2d6474eba5963389d55f795968cb6" kindref="member">hookI2CTransmit</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1aa0d2d6474eba5963389d55f795968cb6" kindref="member">hookI2CTransmit</ref>(DevAddress,<sp/>pBuffer,<sp/>Size);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c<sp/>not<sp/>active&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="770"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1a99f3a0e0399cb234c4beffb898857460" kindref="member">noteI2CReceive</ref>(uint16_t<sp/>DevAddress,<sp/>uint8_t*<sp/>pBuffer,<sp/>uint16_t<sp/>Size,<sp/>uint32_t<sp/>*available)</highlight></codeline>
<codeline lineno="772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1a27a151021020827bdb6304575544bb47" kindref="member">interfaceI2C</ref><sp/>&amp;&amp;<sp/><ref refid="n__hooks_8c_1a263455cdbf1fc17b92a975c7535f1950" kindref="member">hookI2CReceive</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a263455cdbf1fc17b92a975c7535f1950" kindref="member">hookI2CReceive</ref>(DevAddress,<sp/>pBuffer,<sp/>Size,<sp/>available);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c<sp/>not<sp/>active&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="784"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1a57dcffb142faaef2714839d27afe5be0" kindref="member">NoteI2CAddress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1ad55843178b5a1e1ecfba8e9b53544c57" kindref="member">i2cAddress</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a3107c5344909029555deedfacb21b43a" kindref="member">NOTE_I2C_ADDR_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1ad55843178b5a1e1ecfba8e9b53544c57" kindref="member">i2cAddress</ref>;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="798"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a58d7607711312253b402749133e2933a" kindref="member">NoteSetI2CAddress</ref>(uint32_t<sp/>i2caddress)</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1ad55843178b5a1e1ecfba8e9b53544c57" kindref="member">i2cAddress</ref><sp/>=<sp/>i2caddress;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="810"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">uint32_t<sp/><ref refid="n__hooks_8c_1a35bbb8179be3a72ab7ec302dcbfad9e7" kindref="member">NoteI2CMax</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Many<sp/>Arduino<sp/>libraries<sp/>(such<sp/>as<sp/>ESP32)<sp/>have<sp/>a<sp/>limit<sp/>less<sp/>than<sp/>32,<sp/>so<sp/>if<sp/>the<sp/>max<sp/>isn&apos;t<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>assume<sp/>the<sp/>worst<sp/>and<sp/>segment<sp/>the<sp/>I2C<sp/>messages<sp/>into<sp/>very<sp/>tiny<sp/>chunks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" kindref="member">i2cMax</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="note_8h_1a029462dd63c2f85402fa69f5466082f2" kindref="member">NOTE_I2C_MAX_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>design<sp/>specs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" kindref="member">i2cMax</ref><sp/>&gt;<sp/><ref refid="note_8h_1adc8fa90e5c138f5c4a0ac9da3be910d4" kindref="member">NOTE_I2C_MAX_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" kindref="member">i2cMax</ref><sp/>=<sp/><ref refid="note_8h_1adc8fa90e5c138f5c4a0ac9da3be910d4" kindref="member">NOTE_I2C_MAX_MAX</ref>;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a6b4abd91cf929e64478a77b3cab5c793" kindref="member">i2cMax</ref>;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="832"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="n__hooks_8c_1a25a3bc894007c69b27c81bd2093c1457" kindref="member">noteHardReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="834"><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardReset<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardReset();</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//**************************************************************************/</highlight></codeline>
<codeline lineno="859"><highlight class="comment"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1a46919dc17e92cae7ef8421f869ce0a8c" kindref="member">noteJSONTransaction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*request,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>reqLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**response,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>timeoutMs)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardTransaction<sp/>==<sp/>NULL<sp/>||<sp/><ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1ac12390f151d06023c61fbc03ffba5a13" kindref="member">interfaceNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c<sp/>or<sp/>serial<sp/>interface<sp/>must<sp/>be<sp/>selected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardTransaction(request,<sp/>reqLen,<sp/>response,<sp/>timeoutMs);</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1ac546ebc49eb151cc128c58310295a66e" kindref="member">noteChunkedReceive</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>*size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delay,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>timeoutMs,<sp/>uint32_t<sp/>*available)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardChunkedReceive<sp/>==<sp/>NULL<sp/>||<sp/><ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1ac12390f151d06023c61fbc03ffba5a13" kindref="member">interfaceNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c<sp/>or<sp/>serial<sp/>interface<sp/>must<sp/>be<sp/>selected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardChunkedReceive(buffer,<sp/>size,<sp/>delay,<sp/>timeoutMs,<sp/>available);</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="n__hooks_8c_1aeebbd8afc790746f80206493d833a2af" kindref="member">noteChunkedTransmit</ref>(uint8_t<sp/>*buffer,<sp/>uint32_t<sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delay)</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecardChunkedTransmit<sp/>==<sp/>NULL<sp/>||<sp/><ref refid="n__hooks_8c_1a2e1147a166cf94837f8793746231acce" kindref="member">hookActiveInterface</ref><sp/>==<sp/><ref refid="n__hooks_8c_1ac12390f151d06023c61fbc03ffba5a13" kindref="member">interfaceNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2c<sp/>or<sp/>serial<sp/>interface<sp/>must<sp/>be<sp/>selected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notecardChunkedTransmit(buffer,<sp/>size,<sp/>delay);</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/note-c/note-c/n_hooks.c"/>
  </compounddef>
</doxygen>
